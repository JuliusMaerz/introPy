{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to introPy! This website contains information about the two-week Python & Psychopy course taught at the Research Master Psychology (University of Amsterdam). The material itself is hosted on Github in this repository . Prerequisites As this two-week Python course is preceded by a two-week R course in the Research Master Psychology, we assume that students are familiar with basic programming concepts (such as variables, conditionals, loops, and functions). Familiarity with Python is not necessary. Those that already have some experience with Python, however, may find this course (too) easy. To challenge those students, we included several more difficult (optional) exercises in the tutorials! Overview In week 1, you will learn the basics of Python. We assume that you have some programming experience in other languages (e.g., Matlab or R). In week 2, you will learn about the Python package Psychopy , which you can use to program experiments. The preliminary program can be found below. Week Day Format Topic 1 Mo. Lecture Introduction to Python 1 Mo. Tutorial Python essentials 1 We. Lecture Working with data 1 We. Tutorial Matplotlib + Pandas + Numpy 1 Fr. Exam All of the above 2 Mo. Lecture Introduction to stimulus presentation 2 Mo. Tutorial Psychopy Builder 2 We. Lecture Introduction to Psychopy coder 2 We. Tutorial Psychopy Coder 2 Fr. Assignment Create a simple Psychopy experiment! Expect to spend about 30-40 hours per week on this course, which includes watching the lecture, doing the tutorials (including exercises), and working on the assignments. The amount of time you need for this course depends, of course, on your previous experience with programming in general, and programming in Python specifically. None of the tutorials are mandatory, but to be able to complete the exam/assignment (with a decent grade), you really need to work through them! Learning goals At the end of this course, you will ... ... know the major differences between Python and R; ... know the (dis)advantages of Python relative to other programming languages; ... understand the concept of \"object-oriented programming\"; ... be able to create basic Python scripts; ... be able to implement basic data processing operations using pandas / numpy / matplotlib ... know the basics of stimulus presentation; ... be able to implement simple experiments using the Psychopy builder and coder interface Getting started Go to the Getting Started page for installation instructions!","title":"Welcome to introPy!"},{"location":"#welcome-to-intropy","text":"This website contains information about the two-week Python & Psychopy course taught at the Research Master Psychology (University of Amsterdam). The material itself is hosted on Github in this repository .","title":"Welcome to introPy!"},{"location":"#prerequisites","text":"As this two-week Python course is preceded by a two-week R course in the Research Master Psychology, we assume that students are familiar with basic programming concepts (such as variables, conditionals, loops, and functions). Familiarity with Python is not necessary. Those that already have some experience with Python, however, may find this course (too) easy. To challenge those students, we included several more difficult (optional) exercises in the tutorials!","title":"Prerequisites"},{"location":"#overview","text":"In week 1, you will learn the basics of Python. We assume that you have some programming experience in other languages (e.g., Matlab or R). In week 2, you will learn about the Python package Psychopy , which you can use to program experiments. The preliminary program can be found below. Week Day Format Topic 1 Mo. Lecture Introduction to Python 1 Mo. Tutorial Python essentials 1 We. Lecture Working with data 1 We. Tutorial Matplotlib + Pandas + Numpy 1 Fr. Exam All of the above 2 Mo. Lecture Introduction to stimulus presentation 2 Mo. Tutorial Psychopy Builder 2 We. Lecture Introduction to Psychopy coder 2 We. Tutorial Psychopy Coder 2 Fr. Assignment Create a simple Psychopy experiment! Expect to spend about 30-40 hours per week on this course, which includes watching the lecture, doing the tutorials (including exercises), and working on the assignments. The amount of time you need for this course depends, of course, on your previous experience with programming in general, and programming in Python specifically. None of the tutorials are mandatory, but to be able to complete the exam/assignment (with a decent grade), you really need to work through them!","title":"Overview"},{"location":"#learning-goals","text":"At the end of this course, you will ... ... know the major differences between Python and R; ... know the (dis)advantages of Python relative to other programming languages; ... understand the concept of \"object-oriented programming\"; ... be able to create basic Python scripts; ... be able to implement basic data processing operations using pandas / numpy / matplotlib ... know the basics of stimulus presentation; ... be able to implement simple experiments using the Psychopy builder and coder interface","title":"Learning goals"},{"location":"#getting-started","text":"Go to the Getting Started page for installation instructions!","title":"Getting started"},{"location":"installation/","text":"Getting started This pages describes how to download and install the software and materials needed for this course. Python For this course, we of course need a working installation of Python. There are two options: you download Python yourself (see below) or you use an online environment preconfigured with a working Python installlation. Online access to Python For students of the Research Master Psychology, we have set up an external server with Python (through Jupyterhub , which is explained here ) which can be used to do the tutorials; so no need to download Python yourself. The course's Canvas page outlines how to access the server. Alternatively, you may use Binder , which is a service that provides an online Python environment with the course's materials. You can take a look at our own Jupyterhub instance or a Binder-run instance by clicking on the buttons below. Note that our own Jupyterhub instance is only accessible to students from the Research Master Psychology who are enrolled in the \"Programming for Psychology\" course. Note that you must be connected to UvA VPN to be able to access the UvA server. In the online environment, you'll see a lot of files. The course material is stored in the tutorials folder. The solutions folder contains the same material, but with solutions to the exercises in the tutorials. You can ignore the rest of the files (which have to do with configuration and the contents of this website). Warning Note that Binder does not save your notebooks! After you quit Binder (or it times out after an hour of inactivity), all progress is lost (but you can download your notebooks/files). Our own Jupyterhub does save the files. More information on how to get started with the tutorials, go to the week 1 page . Installing Python on your own computer If you want to install Python on your own computer, we highly recommend you install Python through the Anaconda distribution . Choose the appropriate installer (Windows, Mac, or Linux; both the graphical and command line options are fine) and follow the installation instructions. After you have installed your own Python distribution, you can check whether it is working correctly by opening a terminal (on Mac/Linux) or Anaconda Prompt (on Window) and running the following: python -c \"import sys; print(sys.executable)\" This command should print out the location where you installed Python, e.g., /Users/your_name/anaconda3/bin/python (on Mac) or C:\\Users\\your_name\\anaconda3\\bin\\python (on Windows). Psychopy In the second week of the course, we are going to use the Python package psychopy to create simple experiments. If you have a working version of Python already, psychopy can be installed as a regular third-party package through pip . However, because psychopy interacts with a lot of (non-Python) programs and components, getting psychopy to work properly is all but trivial. Instead, we highly recommend installing the \"standalone\" version of psychopy . This version contains everything you need to create experiments using psychopy (even a custom Python distribution specifically designed for psychopy )! Note Note that psychopy does not work on remote servers (including our own and Binder/colab instances), so students from the Research Master course should also download the standalone psychopy version . To test whether the installation was successful and everything works as expected do the following: Start Psychopy; In the menu, click \"Demos\", \"Unpack demos\", and select a location to unpack the demo experiment files; Click on \"Demos\" again and then on \"stroop\", which should open stroop.psyexp in the PsychoPy Builder; Click on the green \"play\" button (\"run experiment\"); After a couple of seconds, you should see a pop-up prompting for a \"session\" and \"participant number\"; Fill in some number (e.g., 01) and click on \"Ok\" to start the experiment; Your screen should turn black and start the experiment! Downloading the material We use both Jupyter notebooks and regular Python scripts for our tutorials. The materials are stored on Github and can be downloaded as a zip-file by clicking on the button below: Download materials After downloading the materials, please unzip the folder. Note that students from the Research Master course do not need the materials from week 1 (which are already on the server). Warning If you work with your own Python installation, you may need to install additional Python packages. To do so, open a terminal and navigate to the root directory of the downloaded materials and run the following: pip install . This is not necessary if you use Binder/Colab as your Python platform! Before you start working on the course materials, read the next page on the Jupyter ecosystem .","title":"Getting started"},{"location":"installation/#getting-started","text":"This pages describes how to download and install the software and materials needed for this course.","title":"Getting started"},{"location":"installation/#python","text":"For this course, we of course need a working installation of Python. There are two options: you download Python yourself (see below) or you use an online environment preconfigured with a working Python installlation.","title":"Python"},{"location":"installation/#online-access-to-python","text":"For students of the Research Master Psychology, we have set up an external server with Python (through Jupyterhub , which is explained here ) which can be used to do the tutorials; so no need to download Python yourself. The course's Canvas page outlines how to access the server. Alternatively, you may use Binder , which is a service that provides an online Python environment with the course's materials. You can take a look at our own Jupyterhub instance or a Binder-run instance by clicking on the buttons below. Note that our own Jupyterhub instance is only accessible to students from the Research Master Psychology who are enrolled in the \"Programming for Psychology\" course. Note that you must be connected to UvA VPN to be able to access the UvA server. In the online environment, you'll see a lot of files. The course material is stored in the tutorials folder. The solutions folder contains the same material, but with solutions to the exercises in the tutorials. You can ignore the rest of the files (which have to do with configuration and the contents of this website). Warning Note that Binder does not save your notebooks! After you quit Binder (or it times out after an hour of inactivity), all progress is lost (but you can download your notebooks/files). Our own Jupyterhub does save the files. More information on how to get started with the tutorials, go to the week 1 page .","title":"Online access to Python"},{"location":"installation/#installing-python-on-your-own-computer","text":"If you want to install Python on your own computer, we highly recommend you install Python through the Anaconda distribution . Choose the appropriate installer (Windows, Mac, or Linux; both the graphical and command line options are fine) and follow the installation instructions. After you have installed your own Python distribution, you can check whether it is working correctly by opening a terminal (on Mac/Linux) or Anaconda Prompt (on Window) and running the following: python -c \"import sys; print(sys.executable)\" This command should print out the location where you installed Python, e.g., /Users/your_name/anaconda3/bin/python (on Mac) or C:\\Users\\your_name\\anaconda3\\bin\\python (on Windows).","title":"Installing Python on your own computer"},{"location":"installation/#psychopy","text":"In the second week of the course, we are going to use the Python package psychopy to create simple experiments. If you have a working version of Python already, psychopy can be installed as a regular third-party package through pip . However, because psychopy interacts with a lot of (non-Python) programs and components, getting psychopy to work properly is all but trivial. Instead, we highly recommend installing the \"standalone\" version of psychopy . This version contains everything you need to create experiments using psychopy (even a custom Python distribution specifically designed for psychopy )! Note Note that psychopy does not work on remote servers (including our own and Binder/colab instances), so students from the Research Master course should also download the standalone psychopy version . To test whether the installation was successful and everything works as expected do the following: Start Psychopy; In the menu, click \"Demos\", \"Unpack demos\", and select a location to unpack the demo experiment files; Click on \"Demos\" again and then on \"stroop\", which should open stroop.psyexp in the PsychoPy Builder; Click on the green \"play\" button (\"run experiment\"); After a couple of seconds, you should see a pop-up prompting for a \"session\" and \"participant number\"; Fill in some number (e.g., 01) and click on \"Ok\" to start the experiment; Your screen should turn black and start the experiment!","title":"Psychopy"},{"location":"installation/#downloading-the-material","text":"We use both Jupyter notebooks and regular Python scripts for our tutorials. The materials are stored on Github and can be downloaded as a zip-file by clicking on the button below: Download materials After downloading the materials, please unzip the folder. Note that students from the Research Master course do not need the materials from week 1 (which are already on the server). Warning If you work with your own Python installation, you may need to install additional Python packages. To do so, open a terminal and navigate to the root directory of the downloaded materials and run the following: pip install . This is not necessary if you use Binder/Colab as your Python platform! Before you start working on the course materials, read the next page on the Jupyter ecosystem .","title":"Downloading the material"},{"location":"intro_psychopy/","text":"Introduction to Psychopy Psychopy is currently the most used and complete Python package to create experiments. Before we will explain how to use it, please read the overview on the Psychopy website. Now, let's familiarize ourselves with Psychopy. Let's start by opening Psychopy! After opening, you'll see a \"Tip of the Day\" pop-up; you may ignore that for now and close it. Warning On Mac, Psychopy might not open right after starting it. In that case, clicking on the icon again seems to work. Subwindows Psychopy by default opens three subwindows: the Psychopy Builder , the Psychopy Coder , and the Experiment runner . The Builder is the graphical interface of Psychopy, which you can use to create experiments without any code, whereas the Coder interface provides an editor in which you can program experiments using Python code (as provided by the Psychopy package). The Experiment runner is a tool to create complex sets of experiments/tasks (e.g., a battery of different tasks or questionnaires). It also provides a \"log\" of whatever is happening in your experiment when you run it. In this tutorial, we will only discuss some general Psychopy features, for which the Builder interface suffices, so you may close the Coder interface and the Experiment runner for now. To read more about the different interfaces, read the Getting started page on the Psychopy website. Running an experiment To get an idea what a Psychopy experiment may look like, let's run a demo! We created a super simple demo that showcases some of the functionality of Psychopy, which can be found in the materials: tutorials/week_2/intropy_demo.psyexp . In the next tutorial, we are going to discuss this in more detail. For now, run the demo by doing the following: Open the intropy_demo.psyexp file (File &rarr Open); Then, click the large green \"play\" button (\u25ba) to start the experiment; This will open the Experiment runner and, after a couple of seconds, a new window; Warning Currently, running experiments when Psychopy is full screen doesn't (always) work... So make sure it's not full screen when you run the demo (or any experiment, really). After the experiment has finished, the experiment window closes automatically. In the Experiment runner , you see some information about the experiment (but nothing super interesting); you may close the Experiment runner for now. Tip Want to quit an experiment before it has finished? Press the escape key! In most experiments, this will abort the experiment. Experiment settings (Builder only) When you are using the Builder interface, you can set several global settings in the Experimental settings window. To open this window, click on the gear icon ( \u2699 ). In the various tabs, you can edit the experiment's settings. For example, under the \"Basic\" tab, you can edit the \"info dialog\": a pop-up that asks the participant for some information. Which information is asked can be changed at the \"Experimental info\" line. ToDo Enable the info dialog by clicking the checkbox next to \"Show info dialog\" and add a new field, \"age\", to the info dialog (without a default value). Then, run the demo experiment again (press the escape key to quit). Just before the experiment window opens, you should see the info dialog pop-up! Under the \"Data\" tab, there are various options to fine-tune how you want your experimental data to be saved. Next to \"Data filename\", you can specify the filename of the datafiles that will be saved. By default, a new directory, data , is created in which the files will be saved. In our demo experiment, we furthermore specified that the filename should be sub-%s_%s' , in which the format specifiers ( %s ) are replaced by the participant identifier ( expInfo['participant'] ) and experiment name ( expInfo['expName'] ). Here, expInfo , refers to a Python variable (a dictionary) that represents the info dialog pop-up (plus some additional information). This way, you can customize your output filenames according to the information provided by the participant! ToDo (optional) Assuming you added the \"age\" field to the info dialog earlier, try to add the participant's age to the output filename such that if participant 01 with age 29 does the experiment, the output filename will be sub-01_age-29_intropy_demo (+ extension). In addition to the mandatory \"psydat\" file (which we personally never used), you can also have Psychopy save an extensive log file and CSV files. We recommend always saving the log and the \"trial-by-trial\" CSV files. Under the \"Audio\" tab, you can specify which soundlibrary Psychopy should use. Currently, Psychopy advises to use the Psychtoolbox (ptb) soundlibrary. The \"Online\" tab contains various settings to export your experiment to a format that can be used online (only applicable to Builder experiments), but this is beyond the scope of this course. Finally, the \"Screen\" tab contains several important settings that specify the experiment window. The \"Screen\" option (default: 1), for example, specifies on which screen the experiment should run in case of multiple monitor set-ups. You can also choose to run the experiment full screen (the default) or whether to specify a particular window size (in pixels) and the color and colorspace of the window (\"Color\" and \"Color space\"). Another important setting is the \"Units\" that Psychopy should use. ToDo Please read the excellent explanation of the different settings for the \"Units\" on the Psychopy website . To see the effect of a different unit for size, change \"Units\" from \"height\" to, e.g., \"pixels\" and run the demo experiment again. Monitors Another important element of each experiment, both in the Coder and Builder interface, is the monitor that it is displayed on. In Psychopy's \"Monitor Center\", you can specify several properties of the monitor(s) that you intend to use for your experiment. Although it is not strictly necessary to specify a monitor for your experiment, it is a prerequisite for some \"Units\" settings (such as degree visual angle )! If possible, we recommend always specifying a monitor. To open the Monitor Center, click on the monitor icon ( \ud83d\udda5 ). You should see the monitor testMonitor , which is, as the notes say, a \"default (not very useful) monitor.\" To create a new monitor, click New and give your new monitor a name (e.g., \"laptop\"). Then, you can specify several properties of your monitor. For example, you can specify the number of pixels of your monitor (e.g., 1920\u00d71080 for a full HD screen), which is important if you use the \"pixel\" setting under \"Units\". You can also set the screen distance, i.e., how far participants are seated from the monitor, (important when stimuli are specified in visual degree angle) and the screen width. ToDo Create a new monitor specific to your own laptop/desktop monitor. Fill in your current screen distance, screen size, and screen width. When you're done, click Save . Set in the Experiment settings the \"Units\" to \"deg\" (visual degree angle) and run the demo experiment. Then, change the screen distance to 200 cm and run the demo experiment again. You should see that the size of the stimuli appears smaller on the screen.","title":"Introduction to Psychopy"},{"location":"intro_psychopy/#introduction-to-psychopy","text":"Psychopy is currently the most used and complete Python package to create experiments. Before we will explain how to use it, please read the overview on the Psychopy website. Now, let's familiarize ourselves with Psychopy. Let's start by opening Psychopy! After opening, you'll see a \"Tip of the Day\" pop-up; you may ignore that for now and close it. Warning On Mac, Psychopy might not open right after starting it. In that case, clicking on the icon again seems to work.","title":"Introduction to Psychopy"},{"location":"intro_psychopy/#subwindows","text":"Psychopy by default opens three subwindows: the Psychopy Builder , the Psychopy Coder , and the Experiment runner . The Builder is the graphical interface of Psychopy, which you can use to create experiments without any code, whereas the Coder interface provides an editor in which you can program experiments using Python code (as provided by the Psychopy package). The Experiment runner is a tool to create complex sets of experiments/tasks (e.g., a battery of different tasks or questionnaires). It also provides a \"log\" of whatever is happening in your experiment when you run it. In this tutorial, we will only discuss some general Psychopy features, for which the Builder interface suffices, so you may close the Coder interface and the Experiment runner for now. To read more about the different interfaces, read the Getting started page on the Psychopy website.","title":"Subwindows"},{"location":"intro_psychopy/#running-an-experiment","text":"To get an idea what a Psychopy experiment may look like, let's run a demo! We created a super simple demo that showcases some of the functionality of Psychopy, which can be found in the materials: tutorials/week_2/intropy_demo.psyexp . In the next tutorial, we are going to discuss this in more detail. For now, run the demo by doing the following: Open the intropy_demo.psyexp file (File &rarr Open); Then, click the large green \"play\" button (\u25ba) to start the experiment; This will open the Experiment runner and, after a couple of seconds, a new window; Warning Currently, running experiments when Psychopy is full screen doesn't (always) work... So make sure it's not full screen when you run the demo (or any experiment, really). After the experiment has finished, the experiment window closes automatically. In the Experiment runner , you see some information about the experiment (but nothing super interesting); you may close the Experiment runner for now. Tip Want to quit an experiment before it has finished? Press the escape key! In most experiments, this will abort the experiment.","title":"Running an experiment"},{"location":"intro_psychopy/#experiment-settings-builder-only","text":"When you are using the Builder interface, you can set several global settings in the Experimental settings window. To open this window, click on the gear icon ( \u2699 ). In the various tabs, you can edit the experiment's settings. For example, under the \"Basic\" tab, you can edit the \"info dialog\": a pop-up that asks the participant for some information. Which information is asked can be changed at the \"Experimental info\" line. ToDo Enable the info dialog by clicking the checkbox next to \"Show info dialog\" and add a new field, \"age\", to the info dialog (without a default value). Then, run the demo experiment again (press the escape key to quit). Just before the experiment window opens, you should see the info dialog pop-up! Under the \"Data\" tab, there are various options to fine-tune how you want your experimental data to be saved. Next to \"Data filename\", you can specify the filename of the datafiles that will be saved. By default, a new directory, data , is created in which the files will be saved. In our demo experiment, we furthermore specified that the filename should be sub-%s_%s' , in which the format specifiers ( %s ) are replaced by the participant identifier ( expInfo['participant'] ) and experiment name ( expInfo['expName'] ). Here, expInfo , refers to a Python variable (a dictionary) that represents the info dialog pop-up (plus some additional information). This way, you can customize your output filenames according to the information provided by the participant! ToDo (optional) Assuming you added the \"age\" field to the info dialog earlier, try to add the participant's age to the output filename such that if participant 01 with age 29 does the experiment, the output filename will be sub-01_age-29_intropy_demo (+ extension). In addition to the mandatory \"psydat\" file (which we personally never used), you can also have Psychopy save an extensive log file and CSV files. We recommend always saving the log and the \"trial-by-trial\" CSV files. Under the \"Audio\" tab, you can specify which soundlibrary Psychopy should use. Currently, Psychopy advises to use the Psychtoolbox (ptb) soundlibrary. The \"Online\" tab contains various settings to export your experiment to a format that can be used online (only applicable to Builder experiments), but this is beyond the scope of this course. Finally, the \"Screen\" tab contains several important settings that specify the experiment window. The \"Screen\" option (default: 1), for example, specifies on which screen the experiment should run in case of multiple monitor set-ups. You can also choose to run the experiment full screen (the default) or whether to specify a particular window size (in pixels) and the color and colorspace of the window (\"Color\" and \"Color space\"). Another important setting is the \"Units\" that Psychopy should use. ToDo Please read the excellent explanation of the different settings for the \"Units\" on the Psychopy website . To see the effect of a different unit for size, change \"Units\" from \"height\" to, e.g., \"pixels\" and run the demo experiment again.","title":"Experiment settings (Builder only)"},{"location":"intro_psychopy/#monitors","text":"Another important element of each experiment, both in the Coder and Builder interface, is the monitor that it is displayed on. In Psychopy's \"Monitor Center\", you can specify several properties of the monitor(s) that you intend to use for your experiment. Although it is not strictly necessary to specify a monitor for your experiment, it is a prerequisite for some \"Units\" settings (such as degree visual angle )! If possible, we recommend always specifying a monitor. To open the Monitor Center, click on the monitor icon ( \ud83d\udda5 ). You should see the monitor testMonitor , which is, as the notes say, a \"default (not very useful) monitor.\" To create a new monitor, click New and give your new monitor a name (e.g., \"laptop\"). Then, you can specify several properties of your monitor. For example, you can specify the number of pixels of your monitor (e.g., 1920\u00d71080 for a full HD screen), which is important if you use the \"pixel\" setting under \"Units\". You can also set the screen distance, i.e., how far participants are seated from the monitor, (important when stimuli are specified in visual degree angle) and the screen width. ToDo Create a new monitor specific to your own laptop/desktop monitor. Fill in your current screen distance, screen size, and screen width. When you're done, click Save . Set in the Experiment settings the \"Units\" to \"deg\" (visual degree angle) and run the demo experiment. Then, change the screen distance to 200 cm and run the demo experiment again. You should see that the size of the stimuli appears smaller on the screen.","title":"Monitors"},{"location":"jupyter/","text":"The Jupyter ecosystem In this course, we will use several tools from project Jupyter . This project includes several nifty tools to make programming a little easier! Jupyterhub One tool that we use in this course is \"Jupyterhub\". This piece of software allows you to easily create a preconfigured Python environment on an external server \u2014 no need to install Python on your own computer anymore! You just go to the website/public IP associated with the external server and you can start programming! We run Jupyterlab on our own server at the University of Amsterdam, which Research Master students can use for this course. Others may use the aforementioned tool \"Binder\" to create a Jupyterhub instance themselves, which can be used for this course as well! Jupyterlab Another tool we use is \"Jupyterlab\", which is an extensive integrated development environment (IDE) similar to RStudio. Because it is implemented in the browser, it combines well with Jupyterhub (but it can also be used on your own computer). Using the Jupyterlab interface, you can create text files and (Python) scripts, open interactive Python consoles, open terminals, and run so-called Jupyter notebooks (for more info, check the documentation ). Don't worry if this doesn't make sense to you at this point! We will explain the most important functionality step-by-step during the course. If you want to see how Jupyterlab looks like, click one of the two buttons below, which will launch a Jupyterhub instance with a Jupyterlab interface that includes the course materials. The UvA Jupyterhub is only accessible to Research Master Students enrolled in the \"Programming for Psychology\" course. Note that, instead of using the Jupyterlab interface, you can also use the \"classic\" interface, which is less extensive but also \"cleaner\". To do so, click on Help \u2192 Launch Classic Notebook or change the word lab to the word tree in the URL. To change back from the classic interface to the Jupyterlab interface, change the word lab back to tree in the URL. Info If you have installed Python on your own computer, you can start the Jupyterlab interface by clicking on the JupyterLab icon in Anaconda Navigator (Mac/Windows) or running the following command in your terminal (Mac/Linux) or Anaconda prompt (Windows): jupyter lab Jupyter notebooks Finally, we use \"Jupyter notebooks\" a lot in this course. Jupyter notebooks are very similar to R Markdown files. Like R Markdown files, you can mix text, code, plots, and mathematical formulas within a single document. Most of our tutorials are actually written in Jupyter notebooks. These notebooks are great for \"interactive programming\", in which it is easy to experiment, try out, and troubleshoot your code. Because this mode of programming is great for teaching, we will use Jupyter notebooks a lot in week 1. Interactive programing is not, however, the only way in which you use Python. In fact, a lot of people use Python in a non-interactive way by writing scripts. In this \"script mode\" (for lack of a better term), writing the code and running the code are done separately. The code interface of Psychopy, for example, cannot be used interactively and only supports \"script mode\". We will dicuss both \"modes\" in this course. If you want to check out Jupyter notebooks already, open Jupyterlab (using Binder, on the UvA server, or on your own computer) and click in the launcher on the \"Python 3\" tile under the \"Notebook\" header, which will open a new Jupyter notebook! Now, you should be ready to start on the course materials!","title":"The Jupyter ecosystem"},{"location":"jupyter/#the-jupyter-ecosystem","text":"In this course, we will use several tools from project Jupyter . This project includes several nifty tools to make programming a little easier!","title":"The Jupyter ecosystem"},{"location":"jupyter/#jupyterhub","text":"One tool that we use in this course is \"Jupyterhub\". This piece of software allows you to easily create a preconfigured Python environment on an external server \u2014 no need to install Python on your own computer anymore! You just go to the website/public IP associated with the external server and you can start programming! We run Jupyterlab on our own server at the University of Amsterdam, which Research Master students can use for this course. Others may use the aforementioned tool \"Binder\" to create a Jupyterhub instance themselves, which can be used for this course as well!","title":"Jupyterhub"},{"location":"jupyter/#jupyterlab","text":"Another tool we use is \"Jupyterlab\", which is an extensive integrated development environment (IDE) similar to RStudio. Because it is implemented in the browser, it combines well with Jupyterhub (but it can also be used on your own computer). Using the Jupyterlab interface, you can create text files and (Python) scripts, open interactive Python consoles, open terminals, and run so-called Jupyter notebooks (for more info, check the documentation ). Don't worry if this doesn't make sense to you at this point! We will explain the most important functionality step-by-step during the course. If you want to see how Jupyterlab looks like, click one of the two buttons below, which will launch a Jupyterhub instance with a Jupyterlab interface that includes the course materials. The UvA Jupyterhub is only accessible to Research Master Students enrolled in the \"Programming for Psychology\" course. Note that, instead of using the Jupyterlab interface, you can also use the \"classic\" interface, which is less extensive but also \"cleaner\". To do so, click on Help \u2192 Launch Classic Notebook or change the word lab to the word tree in the URL. To change back from the classic interface to the Jupyterlab interface, change the word lab back to tree in the URL. Info If you have installed Python on your own computer, you can start the Jupyterlab interface by clicking on the JupyterLab icon in Anaconda Navigator (Mac/Windows) or running the following command in your terminal (Mac/Linux) or Anaconda prompt (Windows): jupyter lab","title":"Jupyterlab"},{"location":"jupyter/#jupyter-notebooks","text":"Finally, we use \"Jupyter notebooks\" a lot in this course. Jupyter notebooks are very similar to R Markdown files. Like R Markdown files, you can mix text, code, plots, and mathematical formulas within a single document. Most of our tutorials are actually written in Jupyter notebooks. These notebooks are great for \"interactive programming\", in which it is easy to experiment, try out, and troubleshoot your code. Because this mode of programming is great for teaching, we will use Jupyter notebooks a lot in week 1. Interactive programing is not, however, the only way in which you use Python. In fact, a lot of people use Python in a non-interactive way by writing scripts. In this \"script mode\" (for lack of a better term), writing the code and running the code are done separately. The code interface of Psychopy, for example, cannot be used interactively and only supports \"script mode\". We will dicuss both \"modes\" in this course. If you want to check out Jupyter notebooks already, open Jupyterlab (using Binder, on the UvA server, or on your own computer) and click in the launcher on the \"Python 3\" tile under the \"Notebook\" header, which will open a new Jupyter notebook! Now, you should be ready to start on the course materials!","title":"Jupyter notebooks"},{"location":"psychopy_builder/","text":"The Psychopy builder interface Topics to discuss: Why Builder? (easy, guaranteed good timing, online) Compilation to Python script Routines vs. components Stimuli Responses Data (input) Loops Data (output) Saving (psyexp)","title":"The Psychopy builder interface"},{"location":"psychopy_builder/#the-psychopy-builder-interface","text":"Topics to discuss: Why Builder? (easy, guaranteed good timing, online) Compilation to Python script Routines vs. components Stimuli Responses Data (input) Loops Data (output) Saving (psyexp)","title":"The Psychopy builder interface"},{"location":"psychopy_coder_part1/","text":"The Psychopy Coder (part 1) Short intro into the basics. Next tutorial more in depth Topics to discuss: Why Coder? (Flexibility, power of Python, understand stimulus programming better) Window","title":"The Psychopy Coder (part 1)"},{"location":"psychopy_coder_part1/#the-psychopy-coder-part-1","text":"Short intro into the basics. Next tutorial more in depth Topics to discuss: Why Coder? (Flexibility, power of Python, understand stimulus programming better) Window","title":"The Psychopy Coder (part 1)"},{"location":"psychopy_coder_part2/","text":"The Psychopy Coder (part 2) Topics to discuss: Stimuli Timing Responses Keeping track of data / responses + saving","title":"The Psychopy Coder (part 2)"},{"location":"psychopy_coder_part2/#the-psychopy-coder-part-2","text":"Topics to discuss: Stimuli Timing Responses Keeping track of data / responses + saving","title":"The Psychopy Coder (part 2)"},{"location":"week_1/","text":"Week 1: Python essentials In this week, we will cover the essentials of Python. On Monday, the lecture will discuss the differences between Python and R and their relative (dis)advantages. The following tutorial will introduce you to the basics of Python, the concept of object-oriented programming, and plotting using the package matplotlib . On Wednesday, the lecture will discuss the Python in the context of data analysis. In the following tutorial, you will work with the data analysis packages pandas and numpy . Lectures < EMBED LECTURE SLIDES HERE > Tutorials This week, there are six tutorials. Start Jupyterhub using one of the buttons below (the UvA one only works for UvA students enrolled in the course): Monday tutorials On Monday, there are three relatively short tutorials. You probably will not finish them all today; just make sure you finished all of them before Wednesday. The tutorials for today are written in Jupyter notebooks. Please do them in order (start with 0_introduction.ipynb , then do 1_python_basics.ipynb ). Wednesday tutorials On Wednesday, there are three tutorials on the data visualization package matplotlib ( 2_matplotlib.ipynb ) and the data processing/analysis packages pandas ( 3_pandas.ipynb ) and numpy ( 4_numpy.ipynb ). The numpy tutorial is optional (i.e., its contents won't be featured on the exam/assignments), but highly recommended for those wanting to develop more advanced data analysis skills (which are useful for, e.g., machine learning and neuroimaging research).","title":"Week 1: Python essentials"},{"location":"week_1/#week-1-python-essentials","text":"In this week, we will cover the essentials of Python. On Monday, the lecture will discuss the differences between Python and R and their relative (dis)advantages. The following tutorial will introduce you to the basics of Python, the concept of object-oriented programming, and plotting using the package matplotlib . On Wednesday, the lecture will discuss the Python in the context of data analysis. In the following tutorial, you will work with the data analysis packages pandas and numpy .","title":"Week 1: Python essentials"},{"location":"week_1/#lectures","text":"< EMBED LECTURE SLIDES HERE >","title":"Lectures"},{"location":"week_1/#tutorials","text":"This week, there are six tutorials. Start Jupyterhub using one of the buttons below (the UvA one only works for UvA students enrolled in the course):","title":"Tutorials"},{"location":"week_1/#monday-tutorials","text":"On Monday, there are three relatively short tutorials. You probably will not finish them all today; just make sure you finished all of them before Wednesday. The tutorials for today are written in Jupyter notebooks. Please do them in order (start with 0_introduction.ipynb , then do 1_python_basics.ipynb ).","title":"Monday tutorials"},{"location":"week_1/#wednesday-tutorials","text":"On Wednesday, there are three tutorials on the data visualization package matplotlib ( 2_matplotlib.ipynb ) and the data processing/analysis packages pandas ( 3_pandas.ipynb ) and numpy ( 4_numpy.ipynb ). The numpy tutorial is optional (i.e., its contents won't be featured on the exam/assignments), but highly recommended for those wanting to develop more advanced data analysis skills (which are useful for, e.g., machine learning and neuroimaging research).","title":"Wednesday tutorials"},{"location":"week_2/","text":"Week 2: Psychopy In this week, we will cover the essentials of Psychopy . On Monday, the lecture will given an introduction to stimulus presentation. The following tutorial will introduce you to the Psychopy Builder interface and the basics of the Coder interface. On Wednesday, the lecture will discuss the Psychopy Coder interface specifically and in the subsequent tutorial you will delve deeper into programming experiments with Psychopy. Lectures < EMBED LECTURE SLIDES HERE > Tutorials This week, there are three tutorials: one on the Psychopy Builder and two on the Psychopy Coder. Unlike the tutorials in week 1, this week's tutorials are not written in Jupyter Notebooks, but are just embedded as pages with instructions on this website. Please go through them in order.","title":"Week 2: Psychopy"},{"location":"week_2/#week-2-psychopy","text":"In this week, we will cover the essentials of Psychopy . On Monday, the lecture will given an introduction to stimulus presentation. The following tutorial will introduce you to the Psychopy Builder interface and the basics of the Coder interface. On Wednesday, the lecture will discuss the Psychopy Coder interface specifically and in the subsequent tutorial you will delve deeper into programming experiments with Psychopy.","title":"Week 2: Psychopy"},{"location":"week_2/#lectures","text":"< EMBED LECTURE SLIDES HERE >","title":"Lectures"},{"location":"week_2/#tutorials","text":"This week, there are three tutorials: one on the Psychopy Builder and two on the Psychopy Coder. Unlike the tutorials in week 1, this week's tutorials are not written in Jupyter Notebooks, but are just embedded as pages with instructions on this website. Please go through them in order.","title":"Tutorials"}]}