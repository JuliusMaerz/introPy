{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to introPy! This website contains information about the two-week Python & PsychoPy course taught at the Research Master Psychology (University of Amsterdam). The material itself is hosted on Github in this repository . Warning This website is under construction and may change considerably! Prerequisites As this two-week Python course is preceded by a two-week R course in the Research Master Psychology, we assume that students are familiar with basic programming concepts (such as variables, conditionals, loops, and functions). Familiarity with Python is not necessary. Those that already have some experience with Python, however, may find the tutorials from this course (too) easy. To challenge those people, we included several more difficult (optional) exercises in the tutorials! Teaching philosophy We believe in learning by doing . Most of your time will be spent by working on exercises, which we call ToDos . Although these exercises are ungraded, we highly recommend that you try to do them. If you manage to work through all of them, getting a decent grade on this course is expected. Overview In week 1, you will learn the basics of Python. We assume that you have some programming experience in other languages (e.g., Matlab or R). In week 2, you will learn about the Python package PsychoPy , which you can use to program experiments. The preliminary program can be found below. Week Day Format Topic 1 Mo. Lecture Introduction to Python 1 Mo. Tutorial Python essentials 1 We. Lecture Working with data 1 We. Tutorial Matplotlib + Pandas + Numpy 1 Fr. Assigment All of the above 2 Mo. Lecture Introduction to stimulus presentation 2 Mo. Tutorial PsychoPy Builder 2 We. - No lecture! 2 We. Tutorial PsychoPy Coder 2 Fr. Exam Create a PsychoPy experiment from scratch! Expect to spend about 20-40 hours per week on this course (as is expected for a four week, full-time 6 EC course), which includes watching the lecture, doing the tutorials (including exercises), and working on the assignments. The amount of time you need for this course depends, of course, on your previous experience with programming in general, and programming in Python specifically. Examination For students from the Research Master taking this course, there will be two graded assignments: one on Friday in week 1 and one on Friday in week 2 (but the latter might be postponed). The assignment in week 1 will involve a task in which you need to use your Python and Pandas skills to preprocess some data, perform several simple analyses, and use Matplotlib to visualize the results. This will be done in a Jupyter notebook on our Jupyterhub server. For the assignment in week 2, you'll have to program an experiment from scratch using the PsychoPy Coder interface. For both assignments, you have 3 hours to complete it. It's an \"open-book\" assignment, but you have to do it on your (i.e., no collaboration with your fellow students), and you'll have to be present on Zoom during those three hours. The assignments are based only on the material discussed in the tutorials; the material that is indicated to be optional won't be part of either of the assignments. About 80% of the assignment will be similar in difficulty as most exercises (\"ToDos\") in the tutorials, but about 20% of the assignment will feature substantially more difficult exercises (similar in difficulty, but not in content, to the optional exercises from the tutorials). In other words, if you complete all tutorials, getting an 8 (out of 10) for the assignments is definitely doable. But getting a(n even) better grade will be more challenging! Learning goals At the end of this course, you will ... know the major differences between Python and R; know the (dis)advantages of Python relative to other programming languages; understand the concept of \"object-oriented programming\"; be able to create basic Python scripts; be able to implement basic data processing operations and visualization using pandas and matplotlib know the basics of stimulus presentation; be able to implement simple experiments using the PsychoPy Builder and Coder interface Getting started Go to the Getting Started page for installation instructions!","title":"Welcome to introPy!"},{"location":"#welcome-to-intropy","text":"This website contains information about the two-week Python & PsychoPy course taught at the Research Master Psychology (University of Amsterdam). The material itself is hosted on Github in this repository . Warning This website is under construction and may change considerably!","title":"Welcome to introPy!"},{"location":"#prerequisites","text":"As this two-week Python course is preceded by a two-week R course in the Research Master Psychology, we assume that students are familiar with basic programming concepts (such as variables, conditionals, loops, and functions). Familiarity with Python is not necessary. Those that already have some experience with Python, however, may find the tutorials from this course (too) easy. To challenge those people, we included several more difficult (optional) exercises in the tutorials!","title":"Prerequisites"},{"location":"#teaching-philosophy","text":"We believe in learning by doing . Most of your time will be spent by working on exercises, which we call ToDos . Although these exercises are ungraded, we highly recommend that you try to do them. If you manage to work through all of them, getting a decent grade on this course is expected.","title":"Teaching philosophy"},{"location":"#overview","text":"In week 1, you will learn the basics of Python. We assume that you have some programming experience in other languages (e.g., Matlab or R). In week 2, you will learn about the Python package PsychoPy , which you can use to program experiments. The preliminary program can be found below. Week Day Format Topic 1 Mo. Lecture Introduction to Python 1 Mo. Tutorial Python essentials 1 We. Lecture Working with data 1 We. Tutorial Matplotlib + Pandas + Numpy 1 Fr. Assigment All of the above 2 Mo. Lecture Introduction to stimulus presentation 2 Mo. Tutorial PsychoPy Builder 2 We. - No lecture! 2 We. Tutorial PsychoPy Coder 2 Fr. Exam Create a PsychoPy experiment from scratch! Expect to spend about 20-40 hours per week on this course (as is expected for a four week, full-time 6 EC course), which includes watching the lecture, doing the tutorials (including exercises), and working on the assignments. The amount of time you need for this course depends, of course, on your previous experience with programming in general, and programming in Python specifically.","title":"Overview"},{"location":"#examination","text":"For students from the Research Master taking this course, there will be two graded assignments: one on Friday in week 1 and one on Friday in week 2 (but the latter might be postponed). The assignment in week 1 will involve a task in which you need to use your Python and Pandas skills to preprocess some data, perform several simple analyses, and use Matplotlib to visualize the results. This will be done in a Jupyter notebook on our Jupyterhub server. For the assignment in week 2, you'll have to program an experiment from scratch using the PsychoPy Coder interface. For both assignments, you have 3 hours to complete it. It's an \"open-book\" assignment, but you have to do it on your (i.e., no collaboration with your fellow students), and you'll have to be present on Zoom during those three hours. The assignments are based only on the material discussed in the tutorials; the material that is indicated to be optional won't be part of either of the assignments. About 80% of the assignment will be similar in difficulty as most exercises (\"ToDos\") in the tutorials, but about 20% of the assignment will feature substantially more difficult exercises (similar in difficulty, but not in content, to the optional exercises from the tutorials). In other words, if you complete all tutorials, getting an 8 (out of 10) for the assignments is definitely doable. But getting a(n even) better grade will be more challenging!","title":"Examination"},{"location":"#learning-goals","text":"At the end of this course, you will ... know the major differences between Python and R; know the (dis)advantages of Python relative to other programming languages; understand the concept of \"object-oriented programming\"; be able to create basic Python scripts; be able to implement basic data processing operations and visualization using pandas and matplotlib know the basics of stimulus presentation; be able to implement simple experiments using the PsychoPy Builder and Coder interface","title":"Learning goals"},{"location":"#getting-started","text":"Go to the Getting Started page for installation instructions!","title":"Getting started"},{"location":"assignment_week2/","text":"Grading key Qualitative criteria Clear and unambiguous instructions; Creativity","title":"Assignment week2"},{"location":"assignment_week2/#_1","text":"","title":""},{"location":"assignment_week2/#grading-key","text":"Qualitative criteria Clear and unambiguous instructions; Creativity","title":"Grading key"},{"location":"installation/","text":"Getting started This pages describes how to download and install the software and materials needed for this course. Python For this course, we of course need a working installation of Python. There are two options: you download Python yourself (see below) or you use an online environment preconfigured with a working Python installlation. Online access to Python For students of the Research Master Psychology, we have set up an external server with Python (through Jupyterhub , which is explained here ) which can be used to do the tutorials; so no need to download Python yourself. The course's Canvas page outlines how to access the server. Alternatively, you may use Binder , which is a service that provides an online Python environment with the course's materials. You can take a look at our own Jupyterhub instance or a Binder-run instance by clicking on the buttons below. Note that our own Jupyterhub instance is only accessible to students from the Research Master Psychology who are enrolled in the \"Programming for Psychology\" course. Note that you must be connected to UvA VPN to be able to access the UvA server. In the online environment, you'll see a lot of files. The course material is stored in the tutorials folder. The solutions folder contains the same material, but with solutions to the exercises in the tutorials. You can ignore the rest of the files (which have to do with configuration and the contents of this website). Warning Note that Binder does not save your notebooks! After you quit Binder (or it times out after an hour of inactivity), all progress is lost (but you can download your notebooks/files). Our own Jupyterhub does save the files. More information on how to get started with the tutorials, go to the week 1 page . Installing Python on your own computer If you want to install Python on your own computer, we highly recommend you install Python through the Anaconda distribution . Choose the appropriate installer (Windows, Mac, or Linux; both the graphical and command line options are fine) and follow the installation instructions. After you have installed your own Python distribution, you can check whether it is working correctly by opening a terminal (on Mac/Linux) or Anaconda Prompt (on Window) and running the following: python -c \"import sys; print(sys.executable)\" This command should print out the location where you installed Python, e.g., /Users/your_name/anaconda3/bin/python (on Mac) or C:\\Users\\your_name\\anaconda3\\bin\\python (on Windows). PsychoPy In the second week of the course, we are going to use PsychoPy , a Python-based software package, to create simple experiments. There are two ways of installing PsychoPy: installing the core Python package psychopy and installing the complete \"standalone\" PsychoPy software package. If you have a working version of Python already, the psychopy Python package can be installed as a regular third-party package through pip . However, because PsychoPy interacts with a lot of (non-Python) programs and components, getting the core psychopy package to work properly is all but trivial. Instead, we highly recommend installing the \"standalone\" version of PsychoPy . The standalone version does not only contain a working version of the psychopy package, but also a custom Python distribution specifically designed to work with PsychoPy, as well as a neat code editor and even a graphical interface (the PsychoPy Builder interface) to create experiments without programming. Note Note that PsychoPy does not work on remote servers (including our own and Binder/colab instances), so students from the Research Master course should also download the standalone PsychoPy version . To test whether the installation was successful and everything works as expected do the following: Start PsychoPy (this should open three windows); Make sure you are in the PsychoPy Builder window; In the menu, click Demos \u2192 Unpack demos , and select a location to unpack the demo experiment files; Click on Demos again and then on stroop , which should open stroop.psyexp in the PsychoPy Builder; Click on the green \"play\" button ( run experiment ); After a couple of seconds, you should see a pop-up prompting for a \"session\" and \"participant number\"; Fill in some number (e.g., 01) and click on Ok to start the experiment; Your screen should turn black and start the experiment! Downloading the material We use both Jupyter notebooks and regular Python scripts for our tutorials. The materials are stored on Github and can be downloaded as a zip-file by clicking on the button below: Download materials After downloading the materials, please unzip the folder. Note that students from the Research Master course do not need the materials from week 1 (which are already on the server). Warning If you work with your own Python installation, you may need to install additional Python packages. To do so, open a terminal and navigate to the root directory of the downloaded materials and run the following: pip install . This is not necessary if you use Binder as your Python platform! Before you start working on the course materials, read the next page on the Jupyter ecosystem .","title":"Getting started"},{"location":"installation/#getting-started","text":"This pages describes how to download and install the software and materials needed for this course.","title":"Getting started"},{"location":"installation/#python","text":"For this course, we of course need a working installation of Python. There are two options: you download Python yourself (see below) or you use an online environment preconfigured with a working Python installlation.","title":"Python"},{"location":"installation/#online-access-to-python","text":"For students of the Research Master Psychology, we have set up an external server with Python (through Jupyterhub , which is explained here ) which can be used to do the tutorials; so no need to download Python yourself. The course's Canvas page outlines how to access the server. Alternatively, you may use Binder , which is a service that provides an online Python environment with the course's materials. You can take a look at our own Jupyterhub instance or a Binder-run instance by clicking on the buttons below. Note that our own Jupyterhub instance is only accessible to students from the Research Master Psychology who are enrolled in the \"Programming for Psychology\" course. Note that you must be connected to UvA VPN to be able to access the UvA server. In the online environment, you'll see a lot of files. The course material is stored in the tutorials folder. The solutions folder contains the same material, but with solutions to the exercises in the tutorials. You can ignore the rest of the files (which have to do with configuration and the contents of this website). Warning Note that Binder does not save your notebooks! After you quit Binder (or it times out after an hour of inactivity), all progress is lost (but you can download your notebooks/files). Our own Jupyterhub does save the files. More information on how to get started with the tutorials, go to the week 1 page .","title":"Online access to Python"},{"location":"installation/#installing-python-on-your-own-computer","text":"If you want to install Python on your own computer, we highly recommend you install Python through the Anaconda distribution . Choose the appropriate installer (Windows, Mac, or Linux; both the graphical and command line options are fine) and follow the installation instructions. After you have installed your own Python distribution, you can check whether it is working correctly by opening a terminal (on Mac/Linux) or Anaconda Prompt (on Window) and running the following: python -c \"import sys; print(sys.executable)\" This command should print out the location where you installed Python, e.g., /Users/your_name/anaconda3/bin/python (on Mac) or C:\\Users\\your_name\\anaconda3\\bin\\python (on Windows).","title":"Installing Python on your own computer"},{"location":"installation/#psychopy","text":"In the second week of the course, we are going to use PsychoPy , a Python-based software package, to create simple experiments. There are two ways of installing PsychoPy: installing the core Python package psychopy and installing the complete \"standalone\" PsychoPy software package. If you have a working version of Python already, the psychopy Python package can be installed as a regular third-party package through pip . However, because PsychoPy interacts with a lot of (non-Python) programs and components, getting the core psychopy package to work properly is all but trivial. Instead, we highly recommend installing the \"standalone\" version of PsychoPy . The standalone version does not only contain a working version of the psychopy package, but also a custom Python distribution specifically designed to work with PsychoPy, as well as a neat code editor and even a graphical interface (the PsychoPy Builder interface) to create experiments without programming. Note Note that PsychoPy does not work on remote servers (including our own and Binder/colab instances), so students from the Research Master course should also download the standalone PsychoPy version . To test whether the installation was successful and everything works as expected do the following: Start PsychoPy (this should open three windows); Make sure you are in the PsychoPy Builder window; In the menu, click Demos \u2192 Unpack demos , and select a location to unpack the demo experiment files; Click on Demos again and then on stroop , which should open stroop.psyexp in the PsychoPy Builder; Click on the green \"play\" button ( run experiment ); After a couple of seconds, you should see a pop-up prompting for a \"session\" and \"participant number\"; Fill in some number (e.g., 01) and click on Ok to start the experiment; Your screen should turn black and start the experiment!","title":"PsychoPy"},{"location":"installation/#downloading-the-material","text":"We use both Jupyter notebooks and regular Python scripts for our tutorials. The materials are stored on Github and can be downloaded as a zip-file by clicking on the button below: Download materials After downloading the materials, please unzip the folder. Note that students from the Research Master course do not need the materials from week 1 (which are already on the server). Warning If you work with your own Python installation, you may need to install additional Python packages. To do so, open a terminal and navigate to the root directory of the downloaded materials and run the following: pip install . This is not necessary if you use Binder as your Python platform! Before you start working on the course materials, read the next page on the Jupyter ecosystem .","title":"Downloading the material"},{"location":"intro_psychopy/","text":"Introduction to PsychoPy PsychoPy is currently the most used and complete Python package to create experiments. Before we will explain how to use it, please read the overview on the PsychoPy website. Now, let's familiarize ourselves with PsychoPy. Let's start by opening PsychoPy! After opening, you'll see a \"Tip of the Day\" pop-up; you may ignore that for now and close it. Warning On Mac, PsychoPy might not open right after starting it. In that case, clicking on the icon again seems to work. Subwindows Psychopy by default opens three subwindows: the PsychoPy Builder , the PsychoPy Coder , and the Experiment runner . The Builder is the graphical interface of PsychoPy, which you can use to create experiments without any code, whereas the Coder interface provides an editor in which you can program experiments using Python code (as provided by the PsychoPy package). The Experiment runner is a tool to create complex sets of experiments/tasks (e.g., a battery of different tasks or questionnaires). It also provides a \"log\" of whatever is happening in your experiment when you run it. In this tutorial, we will only discuss some general PsychoPy features, for which the Builder interface suffices, so you may close the Coder interface and the Experiment runner for now. To read more about the different interfaces, read the Getting started page on the PsychoPy website. Running an experiment To get an idea what a PsychoPy experiment may look like, let's run a demo! We created a super simple demo that showcases some of the functionality of PsychoPy, which can be found in the materials: tutorials/week_2/intropy_demo.psyexp . In the next tutorial, we are going to discuss this in more detail. For now, run the demo by doing the following: Open the intropy_demo.psyexp file (File \u2192 Open); Then, click the large green \"play\" button (\u25ba) to start the experiment; This will open the Experiment runner and, after a couple of seconds, a new window; Warning Currently, running experiments when PsychoPy is full screen doesn't (always) work... So make sure it's not full screen when you run the demo (or any experiment, really). After the experiment has finished, the experiment window closes automatically. In the Experiment runner , you see some information about the experiment (but nothing super interesting). Mac users may see some text mentioning \"ApplePersistenceIgnoreState\"; this is a harmless warning (not an error) and can be ignored. You may close the Experiment runner for now. Tip Want to quit an experiment before it has finished? Press the escape key! In most experiments, this will abort the experiment. Global preferences PsychoPy as a lot of global settings, which you can view and change if you want. You can open the PsychoPy Preferences window by clicking on PsychoPy in the top-most menu bar and then on Preferences . Any changes you make here should be applied to future sessions. For now, no need to change any global preferences. Experiment settings (Builder only) When you are using the Builder interface, you can set several global settings in the Experimental settings window. To open this window, click on the gear icon ( \u2699 ). In the various tabs, you can edit the experiment's settings. For example, under the \"Basic\" tab, you can edit the \"info dialog\": a pop-up that asks the participant for some information. Which information is asked can be changed at the \"Experimental info\" line. ToDo Enable the info dialog by clicking the checkbox next to \"Show info dialog\" and add a new field, \"age\", to the info dialog (without a default value). Then, run the demo experiment again (press the escape key to quit). Just before the experiment window opens, you should see the info dialog pop-up! Under the \"Data\" tab, there are various options to fine-tune how you want your experimental data to be saved. Next to \"Data filename\", you can specify the filename of the datafiles that will be saved. By default, a new directory, data , is created in which the files will be saved. In our demo experiment, we furthermore specified that the filename should be sub-%s_%s' , in which the format specifiers ( %s ) are replaced by the participant identifier ( expInfo['participant'] ) and experiment name ( expInfo['expName'] ). Here, expInfo , refers to a Python variable (a dictionary) that represents the info dialog pop-up (plus some additional information). This way, you can customize your output filenames according to the information provided by the participant! ToDo (optional) Assuming you added the \"age\" field to the info dialog earlier, try to add the participant's age to the output filename such that if, for example, participant 01 who is 29 years old does the experiment, the output filename will be sub-01_age-29_intropy_demo (+ extension). If you're feeling adventurous, try using F-strings instead of format specifiers! In addition to the mandatory \"psydat\" file (which we personally never used), you can also have Psychopy save an extensive log file and CSV files. We recommend always saving the log and the \"trial-by-trial\" CSV files. Under the \"Audio\" tab, you can specify which soundlibrary Psychopy should use. Currently, Psychopy advises to use the Psychtoolbox (ptb) soundlibrary. The \"Online\" tab contains various settings to export your experiment to a format that can be used online (only applicable to Builder experiments), but this is beyond the scope of this course. Finally, the \"Screen\" tab contains several important settings that specify the experiment window. The \"Screen\" option (default: 1), for example, specifies on which screen the experiment should run in case of multiple monitor set-ups. You can also choose to run the experiment full screen (the default) or whether to specify a particular window size (in pixels) and the background color used in the window (\"Color\") and the colorspace used through the experiment (\"Color space\"). The standard background color is [0, 0, 0] in RGB space, where the first value specifies the amount of R ed, the second value the amount of G reen, and the third value the amount of B lue. These values can range from -1 (minimum amount) to 1 (maximum amount). The color [0, 0, 0] specifies gray (as you've seen in the demo). You can read more about PsychoPy's color spaces here . Another important setting is the \"Units\" that Psychopy should use. ToDo Please read the excellent explanation of the different settings for the \"Units\" on the PsychoPy website . To see the effect of a different unit for size, change \"Units\" from \"height\" to, e.g., \"pixels\" and run the demo experiment again. Another important setting is the Monitor . Here, you need to fill in the name of the specific monitor configuration you want to use in your experiment. How to create a monitor configuration is explained in the next section! Monitors Another important element of each experiment, both in the Coder and Builder interface, is the monitor that it is displayed on. In Psychopy's Monitor Center , you can specify several properties of the monitor(s) that you intend to use for your experiment. Although it is not strictly necessary to specify a monitor for your experiment (if you don't, PsychoPy will use a default configuraiton), it is a prerequisite for some \"Units\" settings (such as degree visual angle )! If possible, we recommend always specifying a monitor. To open the Monitor Center , click on the monitor icon ( \ud83d\udda5 ). You should see the default monitor testMonitor , which is, as the notes say, a \"default (not very useful) monitor.\" To create a new monitor, click New and give your new monitor a name (e.g., \"laptop\"). Then, you can specify several properties of your monitor. For example, you can specify the number of pixels of your monitor (e.g., 1920\u00d71080 for a full HD screen), which is important if you use the \"pixel\" setting under \"Units\". You can also set the screen distance, i.e., how far participants are seated from the monitor (important when stimuli are specified in degrees visual angle ) and the screen width. Note that it is also possible to run a calibration procedure in the monitor center and to add the procedure's results to your monitor configuration. Such a calibration procedure makes sure your monitor displays colors as specified in your experiment. This procedure, however, needs specialized equipment (a photometer), which you most likely do not have at home, so you may ignore this for now. ToDo Create a new monitor specific to your own laptop/desktop monitor. Fill in your current screen distance, screen size, and screen width. When you're done, click Save . Set in the Experiment settings the \"Units\" to \"deg\" (visual degree angle) and run the demo experiment. Then, change the screen distance to 200 cm and run the demo experiment again. You should see that the size of the stimuli appears smaller on the screen. Alright, by now you know your way around PsychoPy, so you're ready to start with the Builder interface !","title":"Introduction to PsychoPy"},{"location":"intro_psychopy/#introduction-to-psychopy","text":"PsychoPy is currently the most used and complete Python package to create experiments. Before we will explain how to use it, please read the overview on the PsychoPy website. Now, let's familiarize ourselves with PsychoPy. Let's start by opening PsychoPy! After opening, you'll see a \"Tip of the Day\" pop-up; you may ignore that for now and close it. Warning On Mac, PsychoPy might not open right after starting it. In that case, clicking on the icon again seems to work.","title":"Introduction to PsychoPy"},{"location":"intro_psychopy/#subwindows","text":"Psychopy by default opens three subwindows: the PsychoPy Builder , the PsychoPy Coder , and the Experiment runner . The Builder is the graphical interface of PsychoPy, which you can use to create experiments without any code, whereas the Coder interface provides an editor in which you can program experiments using Python code (as provided by the PsychoPy package). The Experiment runner is a tool to create complex sets of experiments/tasks (e.g., a battery of different tasks or questionnaires). It also provides a \"log\" of whatever is happening in your experiment when you run it. In this tutorial, we will only discuss some general PsychoPy features, for which the Builder interface suffices, so you may close the Coder interface and the Experiment runner for now. To read more about the different interfaces, read the Getting started page on the PsychoPy website.","title":"Subwindows"},{"location":"intro_psychopy/#running-an-experiment","text":"To get an idea what a PsychoPy experiment may look like, let's run a demo! We created a super simple demo that showcases some of the functionality of PsychoPy, which can be found in the materials: tutorials/week_2/intropy_demo.psyexp . In the next tutorial, we are going to discuss this in more detail. For now, run the demo by doing the following: Open the intropy_demo.psyexp file (File \u2192 Open); Then, click the large green \"play\" button (\u25ba) to start the experiment; This will open the Experiment runner and, after a couple of seconds, a new window; Warning Currently, running experiments when PsychoPy is full screen doesn't (always) work... So make sure it's not full screen when you run the demo (or any experiment, really). After the experiment has finished, the experiment window closes automatically. In the Experiment runner , you see some information about the experiment (but nothing super interesting). Mac users may see some text mentioning \"ApplePersistenceIgnoreState\"; this is a harmless warning (not an error) and can be ignored. You may close the Experiment runner for now. Tip Want to quit an experiment before it has finished? Press the escape key! In most experiments, this will abort the experiment.","title":"Running an experiment"},{"location":"intro_psychopy/#global-preferences","text":"PsychoPy as a lot of global settings, which you can view and change if you want. You can open the PsychoPy Preferences window by clicking on PsychoPy in the top-most menu bar and then on Preferences . Any changes you make here should be applied to future sessions. For now, no need to change any global preferences.","title":"Global preferences"},{"location":"intro_psychopy/#experiment-settings-builder-only","text":"When you are using the Builder interface, you can set several global settings in the Experimental settings window. To open this window, click on the gear icon ( \u2699 ). In the various tabs, you can edit the experiment's settings. For example, under the \"Basic\" tab, you can edit the \"info dialog\": a pop-up that asks the participant for some information. Which information is asked can be changed at the \"Experimental info\" line. ToDo Enable the info dialog by clicking the checkbox next to \"Show info dialog\" and add a new field, \"age\", to the info dialog (without a default value). Then, run the demo experiment again (press the escape key to quit). Just before the experiment window opens, you should see the info dialog pop-up! Under the \"Data\" tab, there are various options to fine-tune how you want your experimental data to be saved. Next to \"Data filename\", you can specify the filename of the datafiles that will be saved. By default, a new directory, data , is created in which the files will be saved. In our demo experiment, we furthermore specified that the filename should be sub-%s_%s' , in which the format specifiers ( %s ) are replaced by the participant identifier ( expInfo['participant'] ) and experiment name ( expInfo['expName'] ). Here, expInfo , refers to a Python variable (a dictionary) that represents the info dialog pop-up (plus some additional information). This way, you can customize your output filenames according to the information provided by the participant! ToDo (optional) Assuming you added the \"age\" field to the info dialog earlier, try to add the participant's age to the output filename such that if, for example, participant 01 who is 29 years old does the experiment, the output filename will be sub-01_age-29_intropy_demo (+ extension). If you're feeling adventurous, try using F-strings instead of format specifiers! In addition to the mandatory \"psydat\" file (which we personally never used), you can also have Psychopy save an extensive log file and CSV files. We recommend always saving the log and the \"trial-by-trial\" CSV files. Under the \"Audio\" tab, you can specify which soundlibrary Psychopy should use. Currently, Psychopy advises to use the Psychtoolbox (ptb) soundlibrary. The \"Online\" tab contains various settings to export your experiment to a format that can be used online (only applicable to Builder experiments), but this is beyond the scope of this course. Finally, the \"Screen\" tab contains several important settings that specify the experiment window. The \"Screen\" option (default: 1), for example, specifies on which screen the experiment should run in case of multiple monitor set-ups. You can also choose to run the experiment full screen (the default) or whether to specify a particular window size (in pixels) and the background color used in the window (\"Color\") and the colorspace used through the experiment (\"Color space\"). The standard background color is [0, 0, 0] in RGB space, where the first value specifies the amount of R ed, the second value the amount of G reen, and the third value the amount of B lue. These values can range from -1 (minimum amount) to 1 (maximum amount). The color [0, 0, 0] specifies gray (as you've seen in the demo). You can read more about PsychoPy's color spaces here . Another important setting is the \"Units\" that Psychopy should use. ToDo Please read the excellent explanation of the different settings for the \"Units\" on the PsychoPy website . To see the effect of a different unit for size, change \"Units\" from \"height\" to, e.g., \"pixels\" and run the demo experiment again. Another important setting is the Monitor . Here, you need to fill in the name of the specific monitor configuration you want to use in your experiment. How to create a monitor configuration is explained in the next section!","title":"Experiment settings (Builder only)"},{"location":"intro_psychopy/#monitors","text":"Another important element of each experiment, both in the Coder and Builder interface, is the monitor that it is displayed on. In Psychopy's Monitor Center , you can specify several properties of the monitor(s) that you intend to use for your experiment. Although it is not strictly necessary to specify a monitor for your experiment (if you don't, PsychoPy will use a default configuraiton), it is a prerequisite for some \"Units\" settings (such as degree visual angle )! If possible, we recommend always specifying a monitor. To open the Monitor Center , click on the monitor icon ( \ud83d\udda5 ). You should see the default monitor testMonitor , which is, as the notes say, a \"default (not very useful) monitor.\" To create a new monitor, click New and give your new monitor a name (e.g., \"laptop\"). Then, you can specify several properties of your monitor. For example, you can specify the number of pixels of your monitor (e.g., 1920\u00d71080 for a full HD screen), which is important if you use the \"pixel\" setting under \"Units\". You can also set the screen distance, i.e., how far participants are seated from the monitor (important when stimuli are specified in degrees visual angle ) and the screen width. Note that it is also possible to run a calibration procedure in the monitor center and to add the procedure's results to your monitor configuration. Such a calibration procedure makes sure your monitor displays colors as specified in your experiment. This procedure, however, needs specialized equipment (a photometer), which you most likely do not have at home, so you may ignore this for now. ToDo Create a new monitor specific to your own laptop/desktop monitor. Fill in your current screen distance, screen size, and screen width. When you're done, click Save . Set in the Experiment settings the \"Units\" to \"deg\" (visual degree angle) and run the demo experiment. Then, change the screen distance to 200 cm and run the demo experiment again. You should see that the size of the stimuli appears smaller on the screen. Alright, by now you know your way around PsychoPy, so you're ready to start with the Builder interface !","title":"Monitors"},{"location":"jupyter/","text":"The Jupyter ecosystem In this course, we will use several tools from project Jupyter . This project includes several nifty tools to make programming a little easier! Jupyterhub One tool that we use in this course is \"Jupyterhub\". This piece of software allows you to easily create a preconfigured Python environment on an external server \u2014 no need to install Python on your own computer anymore! You just go to the website/public IP associated with the external server and you can start programming! We run Jupyterlab on our own server at the University of Amsterdam, which Research Master students can use for this course. Others may use the aforementioned tool \"Binder\" to create a Jupyterhub instance themselves, which can be used for this course as well! Jupyterlab Another tool we use is \"Jupyterlab\", which is an extensive integrated development environment (IDE) similar to RStudio. Because it is implemented in the browser, it combines well with Jupyterhub (but it can also be used on your own computer). Using the Jupyterlab interface, you can create text files and (Python) scripts, open interactive Python consoles, open terminals, and run so-called Jupyter notebooks (for more info, check the documentation ). Don't worry if this doesn't make sense to you at this point! We will explain the most important functionality step-by-step during the course. If you want to see how Jupyterlab looks like, click one of the two buttons below, which will launch a Jupyterhub instance with a Jupyterlab interface that includes the course materials. The UvA Jupyterhub is only accessible to Research Master Students enrolled in the \"Programming for Psychology\" course. Note that, instead of using the Jupyterlab interface, you can also use the \"classic\" interface, which is less extensive but also \"cleaner\". To do so, click on Help \u2192 Launch Classic Notebook or change the word lab to the word tree in the URL. To change back from the classic interface to the Jupyterlab interface, change the word lab back to tree in the URL. Info If you have installed Python on your own computer, you can start the Jupyterlab interface by clicking on the JupyterLab icon in Anaconda Navigator (Mac/Windows) or running the following command in your terminal (Mac/Linux) or Anaconda prompt (Windows): jupyter lab Jupyter notebooks Finally, we use \"Jupyter notebooks\" a lot in this course. Jupyter notebooks are very similar to R Markdown files. Like R Markdown files, you can mix text, code, plots, and mathematical formulas within a single document. Most of our tutorials are actually written in Jupyter notebooks. These notebooks are great for \"interactive programming\", in which it is easy to experiment, try out, and troubleshoot your code. Because this mode of programming is great for teaching, we will use Jupyter notebooks a lot in week 1. Interactive programing is not, however, the only way in which you use Python. In fact, a lot of people use Python in a non-interactive way by writing scripts. In this \"script mode\" (for lack of a better term), writing the code and running the code are done separately. The code interface of Psychopy, for example, cannot be used interactively and only supports \"script mode\". We will dicuss both \"modes\" in this course. If you want to check out Jupyter notebooks already, open Jupyterlab (using Binder, on the UvA server, or on your own computer) and click in the launcher on the \"Python 3\" tile under the \"Notebook\" header, which will open a new Jupyter notebook! Now, you should be ready to start on the course materials!","title":"The Jupyter ecosystem"},{"location":"jupyter/#the-jupyter-ecosystem","text":"In this course, we will use several tools from project Jupyter . This project includes several nifty tools to make programming a little easier!","title":"The Jupyter ecosystem"},{"location":"jupyter/#jupyterhub","text":"One tool that we use in this course is \"Jupyterhub\". This piece of software allows you to easily create a preconfigured Python environment on an external server \u2014 no need to install Python on your own computer anymore! You just go to the website/public IP associated with the external server and you can start programming! We run Jupyterlab on our own server at the University of Amsterdam, which Research Master students can use for this course. Others may use the aforementioned tool \"Binder\" to create a Jupyterhub instance themselves, which can be used for this course as well!","title":"Jupyterhub"},{"location":"jupyter/#jupyterlab","text":"Another tool we use is \"Jupyterlab\", which is an extensive integrated development environment (IDE) similar to RStudio. Because it is implemented in the browser, it combines well with Jupyterhub (but it can also be used on your own computer). Using the Jupyterlab interface, you can create text files and (Python) scripts, open interactive Python consoles, open terminals, and run so-called Jupyter notebooks (for more info, check the documentation ). Don't worry if this doesn't make sense to you at this point! We will explain the most important functionality step-by-step during the course. If you want to see how Jupyterlab looks like, click one of the two buttons below, which will launch a Jupyterhub instance with a Jupyterlab interface that includes the course materials. The UvA Jupyterhub is only accessible to Research Master Students enrolled in the \"Programming for Psychology\" course. Note that, instead of using the Jupyterlab interface, you can also use the \"classic\" interface, which is less extensive but also \"cleaner\". To do so, click on Help \u2192 Launch Classic Notebook or change the word lab to the word tree in the URL. To change back from the classic interface to the Jupyterlab interface, change the word lab back to tree in the URL. Info If you have installed Python on your own computer, you can start the Jupyterlab interface by clicking on the JupyterLab icon in Anaconda Navigator (Mac/Windows) or running the following command in your terminal (Mac/Linux) or Anaconda prompt (Windows): jupyter lab","title":"Jupyterlab"},{"location":"jupyter/#jupyter-notebooks","text":"Finally, we use \"Jupyter notebooks\" a lot in this course. Jupyter notebooks are very similar to R Markdown files. Like R Markdown files, you can mix text, code, plots, and mathematical formulas within a single document. Most of our tutorials are actually written in Jupyter notebooks. These notebooks are great for \"interactive programming\", in which it is easy to experiment, try out, and troubleshoot your code. Because this mode of programming is great for teaching, we will use Jupyter notebooks a lot in week 1. Interactive programing is not, however, the only way in which you use Python. In fact, a lot of people use Python in a non-interactive way by writing scripts. In this \"script mode\" (for lack of a better term), writing the code and running the code are done separately. The code interface of Psychopy, for example, cannot be used interactively and only supports \"script mode\". We will dicuss both \"modes\" in this course. If you want to check out Jupyter notebooks already, open Jupyterlab (using Binder, on the UvA server, or on your own computer) and click in the launcher on the \"Python 3\" tile under the \"Notebook\" header, which will open a new Jupyter notebook! Now, you should be ready to start on the course materials!","title":"Jupyter notebooks"},{"location":"psychopy_builder_part1/","text":"Introduction to the PsychoPy Builder In this tutorial, we will discuss and show you how to use the Builder interface of PsychoPy. We will explain the basic elements of the Builder interface so that, in the next tutorial, we can focus more on the implementational details by building a new experiment from scratch. You might think, \"Why learn how to use a graphical interface in a programming course?\" The reason we first teach you how to use the Builder interface is because it allows us to focus on the structure of experiments before elaborating on the underlying code. Another advantage of Builder experiments is that they can be used online! (But this is beyond the scope of this course.) ToDo Read this page which discusses the respective advantages of the Builder and Coder interface in more detail. Builder vs. Coder As discussed before, the Builder and Coder interfaces can both be used to create experiments. Whereas the Builder allows you create experiments graphically, the Coder allows you to program your experiment directly in Python. It is important to realize, though, that when PsychoPy runs Builder experiments, it actually first generates (or \"compiles\") the experiment as a Python file (as if you created it using the Coder)! ToDo Let's see this Builder-to-Coder compilation in action. If you haven't loaded the demo Builder experiment ( intropy_demo.psyexp ), do so now. Then, click the Compile to script button (right of the Edit experiment settings button). This should open the Coder interface with the code equivalent of the demo Builder experiment! The generated intropy_demo.py script contains the code necessary to run the experiment originally specified in the Builder interface (i.e., in the intropy_demo.psyexp file). In fact, everytime your run a Builder experiment on your own computer, Psychopy first generates the corresponding Python script, which is then executed to start the experiment. Most of the time, you can ignore the script associated with your Builder experiment. It may, however, give you some insight about what is going on \"under the hood\". Take a look at the generated script; do you see elements from the demo experiment (e.g., the text or images shown during the demo experiment)? Elements of the Builder interface Now, let's take a look at the elements of the Builder interface. Make sure you (still) have the demo experiment active in the Builder. Apart from the list of icons on top of the Builder window, there are several subwindows (or panes): the Routines pane, the Components pane, and the Flow pane. We'll discuss these in turn. The routines pane The Routines pane consist of the different elements of your experiment, where each element gets its own tab. In the demo experiment, for example, there are four routines: intro , show_stimulus , gabor , and wrap_up . Each routine may consist of multiple components (e.g., text, images, and sounds). For example, if you click on the intro routine tab, the routine pane shows, across different \"rows\", that this routine consists of three consecutive text components ( hello , welcome , and wait_key ) and a \"keyboard\" component ( key_resp ). Moreover, the routine pane also shows you the onset and offsets of the different components. Note that routines do not have to contain multiple components; for example, the show_stimulus routine only contains a single component (i.e., stim ). It's up to you how you how you structure your routines! ToThink In the intro routine, the wait_key and key_resp components seem to lack an explicit offset. Considering the demo experiment, do you understand why? The components pane The components pane contains, as you might have guessed, the different components you can include in your routines. Some of the most used components are listed under favorites (such as text and image components). The stimuli section contains various different stimulus components you might want to use in your experiment, such as dot stimuli , gratings , and sounds . The responses section contains several components that facilitate interaction with the participant. For example, the mouse component allows you to record and use mouse movements and clicks and the rating scale component creates a rating scale which you can use to collect ratings on, for example, questionnaire items. By clicking on a particular component, a pop-up appears in which you can set the properties of the component, such as the component name, onset and and duration, and several component-specific properties. For example, if you click on a text component, you can set the color, font, font size (\"letter height\"), position, and of course the text itself. Tip In the properties window, if you hover your cursor over the different options, you see a little window with an explanation of that option! Also, the PsychoPy documentation contains detailed information about each component. The easiest way to find the appropriate page is, in my experience, just googling \"psychopy component {component name}\". ToDo Try finding the documentation page for the image component! In the properties window, if you click the \"OK\" button, PsychoPy will add this component to the currently active routine. If you want, you can still change the properties afterwards. We will discuss setting component properties in more detail in the next tutorial! ToDo (optional) Try adding another text component with the text \"The end!\" to the wrap_up routine. Make sure it immediately starts after the goodbye component and it lasts one second. Run the experiment to see whether it worked! The flow pane Finally, the flow pane shows and defines the order of your experiment's routines. In the demo experiment, for example, the flow pane shows that the experiment starts with the intro routine, followed by the show_stimulus routine, and finally the gabor and wrap_up routines. The colors of the routines in the flow pane indicate whether the routines has a known and exact duration (green) or not (blue or red). For experiments in which precision of onsets/offsets is not crucial, this is not really important. But in experiments in which you want to be sure your routines' onsets, offsets, and durations are precise (i.e., non-slip timing in PsychoPy lingo), such as in neuroimaging experiments, you want to make sure each routine is green. ToThink Do you understand why the intro routine is blue instead of green? Hint: the answer to this question is the same as to the previous ToThink . ToDo (optional) Try inserting a new routine at the end of the experiment flow (i.e., after the goodbye routine). For example, create a new routine called the_end (in the top menu: Experiment \u2192 New routine ) with a single text component lasting 1 second. Then, to insert it in the experiment flow, click on Insert Routine , select your new routine, and click on the flow line in between wrap_up and the arrow head to insert it! Anothing think you might encounter in the flow pane is \"loops\", like the stimulus_loop in the demo experiment. This functionality allows you to, well, add loops across routines! In the demo experiment, we use this to repeat our show_stimulus routine for the three different images. This is, of course, much more efficient than creating three different routines (or, equivalently, a single routine with three image components)! We will discuss loops in more detail in the next tutorial! Alright, now you should know enough of the Builder functionality to start creating a new experiment, which we'll do in the next tutorial .","title":"Introduction to the PsychoPy Builder"},{"location":"psychopy_builder_part1/#introduction-to-the-psychopy-builder","text":"In this tutorial, we will discuss and show you how to use the Builder interface of PsychoPy. We will explain the basic elements of the Builder interface so that, in the next tutorial, we can focus more on the implementational details by building a new experiment from scratch. You might think, \"Why learn how to use a graphical interface in a programming course?\" The reason we first teach you how to use the Builder interface is because it allows us to focus on the structure of experiments before elaborating on the underlying code. Another advantage of Builder experiments is that they can be used online! (But this is beyond the scope of this course.) ToDo Read this page which discusses the respective advantages of the Builder and Coder interface in more detail.","title":"Introduction to the PsychoPy Builder"},{"location":"psychopy_builder_part1/#builder-vs-coder","text":"As discussed before, the Builder and Coder interfaces can both be used to create experiments. Whereas the Builder allows you create experiments graphically, the Coder allows you to program your experiment directly in Python. It is important to realize, though, that when PsychoPy runs Builder experiments, it actually first generates (or \"compiles\") the experiment as a Python file (as if you created it using the Coder)! ToDo Let's see this Builder-to-Coder compilation in action. If you haven't loaded the demo Builder experiment ( intropy_demo.psyexp ), do so now. Then, click the Compile to script button (right of the Edit experiment settings button). This should open the Coder interface with the code equivalent of the demo Builder experiment! The generated intropy_demo.py script contains the code necessary to run the experiment originally specified in the Builder interface (i.e., in the intropy_demo.psyexp file). In fact, everytime your run a Builder experiment on your own computer, Psychopy first generates the corresponding Python script, which is then executed to start the experiment. Most of the time, you can ignore the script associated with your Builder experiment. It may, however, give you some insight about what is going on \"under the hood\". Take a look at the generated script; do you see elements from the demo experiment (e.g., the text or images shown during the demo experiment)?","title":"Builder vs. Coder"},{"location":"psychopy_builder_part1/#elements-of-the-builder-interface","text":"Now, let's take a look at the elements of the Builder interface. Make sure you (still) have the demo experiment active in the Builder. Apart from the list of icons on top of the Builder window, there are several subwindows (or panes): the Routines pane, the Components pane, and the Flow pane. We'll discuss these in turn.","title":"Elements of the Builder interface"},{"location":"psychopy_builder_part1/#the-routines-pane","text":"The Routines pane consist of the different elements of your experiment, where each element gets its own tab. In the demo experiment, for example, there are four routines: intro , show_stimulus , gabor , and wrap_up . Each routine may consist of multiple components (e.g., text, images, and sounds). For example, if you click on the intro routine tab, the routine pane shows, across different \"rows\", that this routine consists of three consecutive text components ( hello , welcome , and wait_key ) and a \"keyboard\" component ( key_resp ). Moreover, the routine pane also shows you the onset and offsets of the different components. Note that routines do not have to contain multiple components; for example, the show_stimulus routine only contains a single component (i.e., stim ). It's up to you how you how you structure your routines! ToThink In the intro routine, the wait_key and key_resp components seem to lack an explicit offset. Considering the demo experiment, do you understand why?","title":"The routines pane"},{"location":"psychopy_builder_part1/#the-components-pane","text":"The components pane contains, as you might have guessed, the different components you can include in your routines. Some of the most used components are listed under favorites (such as text and image components). The stimuli section contains various different stimulus components you might want to use in your experiment, such as dot stimuli , gratings , and sounds . The responses section contains several components that facilitate interaction with the participant. For example, the mouse component allows you to record and use mouse movements and clicks and the rating scale component creates a rating scale which you can use to collect ratings on, for example, questionnaire items. By clicking on a particular component, a pop-up appears in which you can set the properties of the component, such as the component name, onset and and duration, and several component-specific properties. For example, if you click on a text component, you can set the color, font, font size (\"letter height\"), position, and of course the text itself. Tip In the properties window, if you hover your cursor over the different options, you see a little window with an explanation of that option! Also, the PsychoPy documentation contains detailed information about each component. The easiest way to find the appropriate page is, in my experience, just googling \"psychopy component {component name}\". ToDo Try finding the documentation page for the image component! In the properties window, if you click the \"OK\" button, PsychoPy will add this component to the currently active routine. If you want, you can still change the properties afterwards. We will discuss setting component properties in more detail in the next tutorial! ToDo (optional) Try adding another text component with the text \"The end!\" to the wrap_up routine. Make sure it immediately starts after the goodbye component and it lasts one second. Run the experiment to see whether it worked!","title":"The components pane"},{"location":"psychopy_builder_part1/#the-flow-pane","text":"Finally, the flow pane shows and defines the order of your experiment's routines. In the demo experiment, for example, the flow pane shows that the experiment starts with the intro routine, followed by the show_stimulus routine, and finally the gabor and wrap_up routines. The colors of the routines in the flow pane indicate whether the routines has a known and exact duration (green) or not (blue or red). For experiments in which precision of onsets/offsets is not crucial, this is not really important. But in experiments in which you want to be sure your routines' onsets, offsets, and durations are precise (i.e., non-slip timing in PsychoPy lingo), such as in neuroimaging experiments, you want to make sure each routine is green. ToThink Do you understand why the intro routine is blue instead of green? Hint: the answer to this question is the same as to the previous ToThink . ToDo (optional) Try inserting a new routine at the end of the experiment flow (i.e., after the goodbye routine). For example, create a new routine called the_end (in the top menu: Experiment \u2192 New routine ) with a single text component lasting 1 second. Then, to insert it in the experiment flow, click on Insert Routine , select your new routine, and click on the flow line in between wrap_up and the arrow head to insert it! Anothing think you might encounter in the flow pane is \"loops\", like the stimulus_loop in the demo experiment. This functionality allows you to, well, add loops across routines! In the demo experiment, we use this to repeat our show_stimulus routine for the three different images. This is, of course, much more efficient than creating three different routines (or, equivalently, a single routine with three image components)! We will discuss loops in more detail in the next tutorial! Alright, now you should know enough of the Builder functionality to start creating a new experiment, which we'll do in the next tutorial .","title":"The flow pane"},{"location":"psychopy_builder_part2/","text":"Creating a Builder experiment from scratch Alright, now let's get to the interesting part: actually creating experiments! In this tutorial, we will guide you through creating a \"Stroop task\", step by step. If you are not familiar with the Stroop task, check out the video below! Using the Builder interface, we are going to create a simple color-word Stroop experiment, including instructions, with two conditions: congruent (trials in which the text color matches the word, e.g., red ) and incongruent (trials in which the text color is different from the word, e.g., red ). Along the way, we explain several PsychoPy features, which you will practice with in ToDos . A finished Stroop experiment is availabel under solutions/week_2/stroop.psyexp , but we highly recommend that you first try to complete the exercises without peaking at the solution! Warning Make sure you save your experiment ( File \u2192 Save , or cmd/ctrl + s ) often during this tutorial! Create a new experiment Let's start by creating a new experiment. ToDo Create a new experiment ( File \u2192 New ) and immediately save the experiment with the name stroop.psyexp in the tutorials/week_2 folder. Also, let's change some of the default settings. ToDo In the Experiment settings window ( Basic tab), enter stroop next to Experiment name and remove the session option in the Experiment info box. In the Data tab, make sure the data is saved as sub-{nr} . Finally, in the Screen tab, make sure the experiment uses your own monitor (which you created in an earlier tutorial) and set the Units to \"norm\". Note that the choice of normalized units (\"norm\") is somewhat arbitrary. We personally like it to easily create stimuli with the appropriate size (but YMMV). Creating routines and adding components Let's start our experiment with a nice welcome to our participants who are willing to participate in our experiment. To do so, we'll create a new routine with a single text component. Note that new experiments contain, by default, a single routine named trial . ToDo We'll use the default trial routine, but let's rename it to welcome . In the flow pane, right-click the trial routine, select rename , and change its name to welcome . Then, in the components pane, select a text component. After clicking on the text component icon, the previously discussed properties window pops up. This window has different tabs, but most often you only change things in the Basic tab (and sometimes in the Advanced tab). First of all, although PsychoPy provides a default component name (here: \"text\"), we recommend you choose a descriptive name of the new component. ToDo Give the component a new, descriptive name in the Name field (e.g., welcome_txt ). Then, the next property to determine is the start (onset) and stop (offset) of the component relative to the start of the current routine. For both the start and the stop times of your component, you can choose whether to define these times in seconds \u2014 time (s) in the dropdown menu \u2014 or in the number of frames \u2014 frame N in the dropdown menu. We will revisit timing in terms of the number of frames in the Coder tutorials later; for now, we will use the time (s) option (for more info about the frame N and condition options, check the PsychoPy website ). In addition to the seconds/frames option, the stop time can also be defined in terms of the component's duration (which is, in fact, the default). When the start time is 0, then the duration (s) and time (s) give the same results, of course. ToDo Set the component onset to 0 and the duration to 3 seconds. Other properties include the color and font of the text component. The Color property accepts any standard X11 color name and you can use any font available on your system. For now, let's leave these properties at their default values ( white and Arial ). The next property is the size (or Letter height ) of the text. The units of the font size are whatever you specified in the Experiment settings ! As we specified normalized units, the default ( 0.1 ) represents 10% of the half the the screen. Then, you can specify the position of text component with two numbers: x (the horizontal position) and y (the vertical position). Like the letter height, the units depend on whatever you specified in the Experiment settings . ToDo Let's make this a little bigger. Set the letter height to 0.2. Then (for now specific reason whatsover), set the position such that the text will appear horizontally in the middle, but vertically halfway between the top and the middle. Make sure you have read the explanation of normalized units on the PsychoPy website before you try to do this! Finally, the only thing we need to specify is, of course, the text itself! In the box associated with the Text property, you may specify any plain text, including line breaks (\"enters\"). Note that PsychoPy will automatically try to wrap the text if it exceeds the window (which can be customized with the Wrap width option in the Advanced tab). ToDo Add some text to the text component to welcome our participant. When you're done, click OK to save all the changes to the properties. By now, you should see the new text component in both the routines pane (with its onset/offset) and in the flow pane. Try running the experiment by clicking on the green play button (\u25ba) to check whether everything works as expected! If the Experiment runner displays ##### Experiment ended. ##### , everything ran without problems. Tip Each Builder component has a Help button in the lower left corner of the properties window. If you click this button, your browser will open the PsychoPy documentation of the associated component! Keyboard interaction After welcoming our participants, let's give them some general instructions about our task. As a side note, we want to stress that spending some time and effort to create clear and extensive instructions can, in our experience, matter a lot for the quality of your data! Here, we'll keep it short, but keep this in mind for your future experiments. ToDo Add a new routine ( Experiment \u2192 New Routine ) and name it instructions . After doing so, you should see that an empty routine appears in the routine pane. Also, note that PsychoPy does not automatically add your new routine to the flow pane (after all, it doesn't know where you want this routine to appear). To do so, click on Insert Routine in the flow pane, select the instructions routine, and click on the flow in between the welcome routine and the right arrow head. ToDo Add the instructions routine to the flow right after the welcome routine. Now, we need another text component with instructions of course, but this time we are going to implement it slightly differently than we did in the welcome routine. We want to make sure our participants have enough time to read the instructions, so setting a predefined duration (like we did in the welcome routine) is not ideal. Instead, we will let the participant indicate whenever they are done and want to continue by having them press the return (\"enter\") key. But first, we need a text component with some instructions. ToDo Add a text component with the following text: In this experiment, you will see words (either \u201cgreen\u201d or \u201cred\u201d) in different colors (also either \u201cgreen\u201d or \u201cred\u201d). Importantly, you need to respond to the COLOR of the word and you need to ignore the actual word. You respond with the arrow keys: GREEN color = left RED color = right (Press \u2018enter\u2019 to start the experiment!) Give the component a sensible name, keep the letter height at the default (0.1), and leave the stop property empty. The effect of leaving the stop property empty is that you, technically, create a component with an infinite duration. This is highlighted in the routine pane by the bar corresponding to the component extending beyond the time axis. As mentioned, we'd like to continue the experiment if the participant pressed the return key. To implement this, we'll need to add a keyboard component . In addition to some standard properties (like name , start , and stop ), the keyboard component also has the property Allowed keys , which specifies which keys are recorded and affect this component, and Store , which specifies which of the potentially multiple key presses should be saved. The property Store correct is not relevant, here, so we'll ignore that for now. Another important property, especially in our current use case, is the Force end of Routine option. When enabled (the default), it will end the current routine and move on to the next whenever one of the allowed keys is pressed, which is exactly what we want for our instruction routine! ToDo Add a keyboard component to the instruction routine. Make sure the stop property is left empty and that it ends the routine when the participant presses the return key (i.e., use \"return\" for Allowed keys ). If you did the ToDo correctly, you should see a new keyboard component in the instruction routine which similarly extends beyond the time axis of the routine pane (indicating that it does not have an offset). Now, run the experiment again and check whether the instruction routine works as expected! (Note: because the instruction routine is the experiment's last routine, it may seem that the experiment doesn't advance immediately after pressing enter, but that's because it takes a second or two to quit the experiment after the last routine due to saving data and such.) If this were a real experiment for your master thesis, for example, we'd recommend adding some more detailed instructions and practice trials. Also, you probably want to use a larger variety of color-word pairs to increase generalizability (see, e.g., Westfall, Nichols, & Yarkoni, 2017 ). But to keep this experiment relatively simple, our current instructions suffice and we'll only work with two colors (green and red). Shape (polygon) components Often, experiments contain a \"fixation target\" before and in between trials to prevent participants from making too many eyemovements which may impact the results. Often, a simple plus sign is used (which can be created using a text component). For educational purposes, however, let's use a small circle (\"fixation dot\"), which can be created using the Polygon component. Let's add an initial fixation target to our experiment, so that the first trial doesn't immediately show up after the instructions. ToDo Create a new routine, named init_fix , with a single Polygon component representing a white circle of size (0.01, 0.01) lasting 2 seconds. Note: \"circle\" is not part of the standard polygon shapes you can choose. Read the documentation carefully to figure out how to create a circle! After creating the init_fix routine, run the experiment to see whether it works as expected! ToThink If you run the experiment, the fixation dot may look more like an oval than a circle... Do you understand why? Do you know how to fix this?Hint: it has to do with the experiment's units. If you want a challenge, try the (optional) ToDo below. ToDo In their article What is the best fixation target? The effect of target shape on stability of fixational eye movements , Thaler and colleagues (2013) investigate the effect of different fixation targets on eye movements and find that the fixation target below leads to the fewest eye movements. Try creating this \"optimal fixation target\" instead of the circle from the previous ToDo. Note that you need multiple Polygon components in the same routine to achieve this. Loops and conditions files Now, it's time to focus on the most important element of the experiment: the actual \"color-word\" trials! To do so, we can create a routine with a single text component (in which we can vary the text itself and the text color). Let's start with a congruent trial in which both the word and the color is red. Also, it would be nice if the routine terminates after 5 seconds or upon a button press (limited to either the 'left' or 'right' keys) and is followed by a fixation target routine of 0.5 seconds (a so-called \"inter-stimulus interval\", or ISI). ToDo Add a new routine, named stim , with a text stimulus ( trial_txt ) with the word \"red\" in the color red and font size 0.2, which terminates after 5 seconds or when the participant presses the left or right arrow key (for which you need to add a keyboard component!) and is followed by a new routine, named isi , which shows a fixation dot (like in the init_fix routine we created before) for 0.5 seconds. Try running the experiment when you're done to see whether everything works as expected! Alright, that's a start. But we need more than one trial, of course! One strategy would be to keep adding adding additional stim routines (e.g., stim1 , stim2 , ... , stim100 ) with different color-word pairs and subsequent ISI routines (e.g., isi1 , isi2 , ..., isi100 ), but that would not be very efficient, right? You probably see where I'm going: we can use a loop for this! In this loop, we can reuse the general structure of the trial (a stim routine + a isi routine) and only vary the elements that differ across trials (i.e., the words and text colors). These varying elements can be any property of any component within the loop! The way to specify the varying elements in a loop is through a conditions file (an Excel or CSV file). In this file, the rows represent the different trials and the columns represent the different elements that vary across trials. For our Stroop experiment, we could create a file, conditions.xlsx (or conditions.csv ) with two columns \u2014 stim_word and stim_color \u2014 and twenty rows: 5 rows for each color-word combination (5 for red-red, 5 for red-green, 5 for green-green, and 5 for green-red), assuming we want a 50/50 split between the congruent/incongruent conditions. The values for the stim_word and stim_color columns can then be used to modify, per iteration of the loop, the Text and Color attributes of our text component, respectively. ToDo Create an Excel (or CSV) file with two columns named stim_word and stim_color and 20 rows outlining the words and colors (which should be either red or green ). Note that your final file should have 21 rows (the first row being the column headers). Make sure to save this file in the same directory as your stroop.psyexp file. Now, to create the loop, you need to click Insert Loop in the flow pane. Then, when hovering your cursor above the actual flow diagram, a small circle should appear; click on the flow diagram where you'd like your loop to start and click a second time on the diagram where you'd like to your loop to end, after which a new Loop Properties window should pop up. In this window, you can specify the name of the loop, the type of the loop (i.e., how to loop across the different rows), and whether this is a loop across trials or blocks (i.e., the Is trials option, which you may ignore for now). The nReps property indicates how often you want to loop across your different trials and the Selected rows optionally allows you to specify a subset of rows to loop over. By setting the random seed (an integer), you can make sure that the loop shuffles the trials the same way every time you run the experiment. Finally, the Conditions property should point to the Excel or CSV file with the properties that change across the different trials. ToDo Create a loop across the stim and isi routines (i.e., the loop should encompass these two routines). Name this loop trial_loop and make sure it loops randomly across trials a total for 3 repetitions (generating 60 trials). No need to select a subset of rows or to set a random seed. Select your previously created conditions.xlsx (or conditions.csv ) for the Conditions property. Although we have created our loop, the data in the Conditions file has not been linked to our text component (in the stim routine), yet! To do so, we need to modify the Color and Text properties in our text component in two ways. First, we need to tell PsychoPy that the value of the property changes every iteration of the loop. To do so, we need to change the constant value to set every repeat in the dropdown menu next to the property. Second, we need to tell PsychoPy the column name (from our conditions file) that contains the values for the property we want to update every iteration. Importantly, this column name needs to be prefixed by a dollar sign ( $ ), i.e., $some_column_name . ToDo In the text component from your stim routine, change constant to set every repeat for both the Color and Text properties. Then, make sure the values for the Color and Text properties refer to the stim_color and stim_word columns from your conditions file, respectively. Click OK to update the text component. Run the experiment to see whether everything works as expected! If you made it to this point in the tutorial: good job! You created a complete Stroop experiment from scratch! In the following sections, we'll add some more (non-essential) elements to our experiment as an excuse to explain some more Builder components. Tip In the next section, we are going to add some routines after our trial loop. When we want to test this, it is quite annoying that we have to go through our entire trial loop before seeing the new routines. One way to \"skip\" the trial loop is to enable the Disable component property (in the Testing tab of the properties window) of each component in the stim and isi routines, which will skip said routines. Another thing you can do is to set the nReps property of the loop to 0! Mouse interaction After the trials, we might want to get some feedback on the task from the participant. Let's ask our participant the question \"Did you like this task?\" to which the participant can answer \"yes\" or \"no\". This time, though, we'll make the participant answer using the mouse (instead of the keyboard) by clicking in either a green circle on the left (for \"yes\") or a red circle on the right (for \"no\"). Note that this is a completely useless addition the current experiment, but we included it nonetheless to demonstrate the Mouse component. ToDo Create a new routine, named feedback , which creates a display like the image below (doesn't have to exactly like it). Make sure each component has an infinite duration (by leaving the stop property empty). Hint: you can change the (RGB-specified) color of the Polygon components in the Advanced tab of the properties window. If you test your implementation, remember that you can use the escape key to abort the experiment. To enable interaction through the mouse we can, guess what, add a Mouse component! Like the keyboard component, this component can force the end of the routine with the End Routine on Press property. By default, this is set to any click , meaning that the routine will end at the first button press of the participant. However, we'd like to only end the routine when the participant made a \"valid\" click, i.e., clicked one of the circles. To do so, you can set the End Routine on Press to valid click and explicitly specify which components, when clicked, count as \"valid clicks\" at the Clickable stimuli property. ToDo Add a Mouse component, give it a sensible name, set the duration to infinite, and make sure it forces the end of the routine only when one of the circles have been clicked by filling in the component names of your circles in the Clickable stimuli field (separated by a comma). Run the experiment to see whether everything works as expected! Image components We are of course thankful for the participant's efforts, so let's thank them! We found a nice image to include in a final routine, thank_you.png (which is located in the tutorials/week_2 directory). To embed an image in your experiment, you can use the Image component. ToDo Add a new routine after the feedback routine, named goodbye , which contains a single Image component, which lasts 3 seconds. Make sure to set the Image property with the thank_you.png file. Run the experiment to see whether everything works as expected! Code components (optional) Alright, for those that want to delve a little deeper into the more advanced Builder features, let's take a look at Code components (this is an optional section). With Code components, you can \"inject\" custom Python code into your Builder experiment. To showcase Code components, let's use one to implement random ISIs (instead of the fixed 0.5 seconds we use now). Using variable instead of fixed ISIs is a trick to prevent participants to anticipate the upcoming stimulus/trial. As we want to vary the ISI, we need to change the fixation dot in the isi routine. To do so, we'll create a new Python variable that represents a random ISI in a Code compoment, which we subsequently need to link to the Polygon component (i.e., the fixation target). To generate a random ISI (e.g., uniformly distributed between 0 and 1), we can use the [uniform] function from the built-in Python module random : import random t_isi = random . uniform ( 0 , 1 ) Here, t_isi is a float between 0 and 1. When creating a new Code component, the properties window actually allows you to specify different code types: Python ( py ), Javascript ( JS ), or a combination of both ( both ). Then, you can specify your code to run at different times during the experiment ( Before Experiment , Begin Experiment , End Experiment ) and routine ( Begin Routine , End Routine ). ToDo Create a new Code component, give it a sensible name, and make sure the code snippet above runs at the start of the isi routine. The only thing we still need to do is to make sure the Polygon component uses the randomly generated ISI (i.e., t_isi ) for its duration. In general, you can write Python code and access Python variables \"under the hood\" by prefixing the value by a dollar sign ( $ ), like we did when accessing the columns from the conditions file earlier. So, to access the Python variable t_isi from our Code component for the Polygon end property, you can use $t_isi . ToDo Make sure the end property of the fixation dot Polygon component uses the t_isi variable from our Code component. Then, run the experiment to verify that the ISIs are now different from trial to trial. Alright, if you are up for a challenge, try one or both of the next ToDos. ToDo (optional; difficult!) In some experiments, you may want to give your participant feedback after each trial. Add a routine after the stim routine within the trial loop that shows, for 0.5 seconds, the text \"correct!\" when the participant gave the right response, \"incorrect!\" when the participant gave the wrong response, and \"too late!\" when the participant didn't respond within 5 seconds. You need to include a Code component in this new routine that determines this feedback. Hint: in your Code component, the color of the current stimulus is stored in the Python variable stim_color and the response from the participant (i.e., either 'left' or 'right') is stored in the Python variable {name_kb_comp}.keys (replace {name_kb_comp} with the actual name of your keyboard componet in the stim routine). ToDo (optional; difficult!) In the current experiment, we indicated that participants should respond 'left' to green-colored words and 'right' to red-colored words. However, ideally, you'd want to counterbalance this color-response contingency across participants, i.e., (approximately) half of the participants should respond red-left/green-right and the other half should respond red-right/green-left. This between-subject condition should affect the text Component of the instruction routine. Arguably the easiest way to implement this is by creating another conditions file (e.g., participants.{xlsx,csv} ) that outlines the color-response condition, which modifies the instruction routine. Bonus: try to implement this ToDo and the previous optional ToDo in the same experiment! Finally, we're at the end of the Builder tutorial! By now, you know most of the essential features of PsychoPy's Builder interface. Of course, PsychoPy offers many more (advanced) functionality and funky components, but we'll leave that up to you to explore yourself! For now, let's continue with the first Coder tutorial !","title":"Creating a Builder experiment from scratch"},{"location":"psychopy_builder_part2/#creating-a-builder-experiment-from-scratch","text":"Alright, now let's get to the interesting part: actually creating experiments! In this tutorial, we will guide you through creating a \"Stroop task\", step by step. If you are not familiar with the Stroop task, check out the video below! Using the Builder interface, we are going to create a simple color-word Stroop experiment, including instructions, with two conditions: congruent (trials in which the text color matches the word, e.g., red ) and incongruent (trials in which the text color is different from the word, e.g., red ). Along the way, we explain several PsychoPy features, which you will practice with in ToDos . A finished Stroop experiment is availabel under solutions/week_2/stroop.psyexp , but we highly recommend that you first try to complete the exercises without peaking at the solution! Warning Make sure you save your experiment ( File \u2192 Save , or cmd/ctrl + s ) often during this tutorial!","title":"Creating a Builder experiment from scratch"},{"location":"psychopy_builder_part2/#create-a-new-experiment","text":"Let's start by creating a new experiment. ToDo Create a new experiment ( File \u2192 New ) and immediately save the experiment with the name stroop.psyexp in the tutorials/week_2 folder. Also, let's change some of the default settings. ToDo In the Experiment settings window ( Basic tab), enter stroop next to Experiment name and remove the session option in the Experiment info box. In the Data tab, make sure the data is saved as sub-{nr} . Finally, in the Screen tab, make sure the experiment uses your own monitor (which you created in an earlier tutorial) and set the Units to \"norm\". Note that the choice of normalized units (\"norm\") is somewhat arbitrary. We personally like it to easily create stimuli with the appropriate size (but YMMV).","title":"Create a new experiment"},{"location":"psychopy_builder_part2/#creating-routines-and-adding-components","text":"Let's start our experiment with a nice welcome to our participants who are willing to participate in our experiment. To do so, we'll create a new routine with a single text component. Note that new experiments contain, by default, a single routine named trial . ToDo We'll use the default trial routine, but let's rename it to welcome . In the flow pane, right-click the trial routine, select rename , and change its name to welcome . Then, in the components pane, select a text component. After clicking on the text component icon, the previously discussed properties window pops up. This window has different tabs, but most often you only change things in the Basic tab (and sometimes in the Advanced tab). First of all, although PsychoPy provides a default component name (here: \"text\"), we recommend you choose a descriptive name of the new component. ToDo Give the component a new, descriptive name in the Name field (e.g., welcome_txt ). Then, the next property to determine is the start (onset) and stop (offset) of the component relative to the start of the current routine. For both the start and the stop times of your component, you can choose whether to define these times in seconds \u2014 time (s) in the dropdown menu \u2014 or in the number of frames \u2014 frame N in the dropdown menu. We will revisit timing in terms of the number of frames in the Coder tutorials later; for now, we will use the time (s) option (for more info about the frame N and condition options, check the PsychoPy website ). In addition to the seconds/frames option, the stop time can also be defined in terms of the component's duration (which is, in fact, the default). When the start time is 0, then the duration (s) and time (s) give the same results, of course. ToDo Set the component onset to 0 and the duration to 3 seconds. Other properties include the color and font of the text component. The Color property accepts any standard X11 color name and you can use any font available on your system. For now, let's leave these properties at their default values ( white and Arial ). The next property is the size (or Letter height ) of the text. The units of the font size are whatever you specified in the Experiment settings ! As we specified normalized units, the default ( 0.1 ) represents 10% of the half the the screen. Then, you can specify the position of text component with two numbers: x (the horizontal position) and y (the vertical position). Like the letter height, the units depend on whatever you specified in the Experiment settings . ToDo Let's make this a little bigger. Set the letter height to 0.2. Then (for now specific reason whatsover), set the position such that the text will appear horizontally in the middle, but vertically halfway between the top and the middle. Make sure you have read the explanation of normalized units on the PsychoPy website before you try to do this! Finally, the only thing we need to specify is, of course, the text itself! In the box associated with the Text property, you may specify any plain text, including line breaks (\"enters\"). Note that PsychoPy will automatically try to wrap the text if it exceeds the window (which can be customized with the Wrap width option in the Advanced tab). ToDo Add some text to the text component to welcome our participant. When you're done, click OK to save all the changes to the properties. By now, you should see the new text component in both the routines pane (with its onset/offset) and in the flow pane. Try running the experiment by clicking on the green play button (\u25ba) to check whether everything works as expected! If the Experiment runner displays ##### Experiment ended. ##### , everything ran without problems. Tip Each Builder component has a Help button in the lower left corner of the properties window. If you click this button, your browser will open the PsychoPy documentation of the associated component!","title":"Creating routines and adding components"},{"location":"psychopy_builder_part2/#keyboard-interaction","text":"After welcoming our participants, let's give them some general instructions about our task. As a side note, we want to stress that spending some time and effort to create clear and extensive instructions can, in our experience, matter a lot for the quality of your data! Here, we'll keep it short, but keep this in mind for your future experiments. ToDo Add a new routine ( Experiment \u2192 New Routine ) and name it instructions . After doing so, you should see that an empty routine appears in the routine pane. Also, note that PsychoPy does not automatically add your new routine to the flow pane (after all, it doesn't know where you want this routine to appear). To do so, click on Insert Routine in the flow pane, select the instructions routine, and click on the flow in between the welcome routine and the right arrow head. ToDo Add the instructions routine to the flow right after the welcome routine. Now, we need another text component with instructions of course, but this time we are going to implement it slightly differently than we did in the welcome routine. We want to make sure our participants have enough time to read the instructions, so setting a predefined duration (like we did in the welcome routine) is not ideal. Instead, we will let the participant indicate whenever they are done and want to continue by having them press the return (\"enter\") key. But first, we need a text component with some instructions. ToDo Add a text component with the following text: In this experiment, you will see words (either \u201cgreen\u201d or \u201cred\u201d) in different colors (also either \u201cgreen\u201d or \u201cred\u201d). Importantly, you need to respond to the COLOR of the word and you need to ignore the actual word. You respond with the arrow keys: GREEN color = left RED color = right (Press \u2018enter\u2019 to start the experiment!) Give the component a sensible name, keep the letter height at the default (0.1), and leave the stop property empty. The effect of leaving the stop property empty is that you, technically, create a component with an infinite duration. This is highlighted in the routine pane by the bar corresponding to the component extending beyond the time axis. As mentioned, we'd like to continue the experiment if the participant pressed the return key. To implement this, we'll need to add a keyboard component . In addition to some standard properties (like name , start , and stop ), the keyboard component also has the property Allowed keys , which specifies which keys are recorded and affect this component, and Store , which specifies which of the potentially multiple key presses should be saved. The property Store correct is not relevant, here, so we'll ignore that for now. Another important property, especially in our current use case, is the Force end of Routine option. When enabled (the default), it will end the current routine and move on to the next whenever one of the allowed keys is pressed, which is exactly what we want for our instruction routine! ToDo Add a keyboard component to the instruction routine. Make sure the stop property is left empty and that it ends the routine when the participant presses the return key (i.e., use \"return\" for Allowed keys ). If you did the ToDo correctly, you should see a new keyboard component in the instruction routine which similarly extends beyond the time axis of the routine pane (indicating that it does not have an offset). Now, run the experiment again and check whether the instruction routine works as expected! (Note: because the instruction routine is the experiment's last routine, it may seem that the experiment doesn't advance immediately after pressing enter, but that's because it takes a second or two to quit the experiment after the last routine due to saving data and such.) If this were a real experiment for your master thesis, for example, we'd recommend adding some more detailed instructions and practice trials. Also, you probably want to use a larger variety of color-word pairs to increase generalizability (see, e.g., Westfall, Nichols, & Yarkoni, 2017 ). But to keep this experiment relatively simple, our current instructions suffice and we'll only work with two colors (green and red).","title":"Keyboard interaction"},{"location":"psychopy_builder_part2/#shape-polygon-components","text":"Often, experiments contain a \"fixation target\" before and in between trials to prevent participants from making too many eyemovements which may impact the results. Often, a simple plus sign is used (which can be created using a text component). For educational purposes, however, let's use a small circle (\"fixation dot\"), which can be created using the Polygon component. Let's add an initial fixation target to our experiment, so that the first trial doesn't immediately show up after the instructions. ToDo Create a new routine, named init_fix , with a single Polygon component representing a white circle of size (0.01, 0.01) lasting 2 seconds. Note: \"circle\" is not part of the standard polygon shapes you can choose. Read the documentation carefully to figure out how to create a circle! After creating the init_fix routine, run the experiment to see whether it works as expected! ToThink If you run the experiment, the fixation dot may look more like an oval than a circle... Do you understand why? Do you know how to fix this?Hint: it has to do with the experiment's units. If you want a challenge, try the (optional) ToDo below. ToDo In their article What is the best fixation target? The effect of target shape on stability of fixational eye movements , Thaler and colleagues (2013) investigate the effect of different fixation targets on eye movements and find that the fixation target below leads to the fewest eye movements. Try creating this \"optimal fixation target\" instead of the circle from the previous ToDo. Note that you need multiple Polygon components in the same routine to achieve this.","title":"Shape (polygon) components"},{"location":"psychopy_builder_part2/#loops-and-conditions-files","text":"Now, it's time to focus on the most important element of the experiment: the actual \"color-word\" trials! To do so, we can create a routine with a single text component (in which we can vary the text itself and the text color). Let's start with a congruent trial in which both the word and the color is red. Also, it would be nice if the routine terminates after 5 seconds or upon a button press (limited to either the 'left' or 'right' keys) and is followed by a fixation target routine of 0.5 seconds (a so-called \"inter-stimulus interval\", or ISI). ToDo Add a new routine, named stim , with a text stimulus ( trial_txt ) with the word \"red\" in the color red and font size 0.2, which terminates after 5 seconds or when the participant presses the left or right arrow key (for which you need to add a keyboard component!) and is followed by a new routine, named isi , which shows a fixation dot (like in the init_fix routine we created before) for 0.5 seconds. Try running the experiment when you're done to see whether everything works as expected! Alright, that's a start. But we need more than one trial, of course! One strategy would be to keep adding adding additional stim routines (e.g., stim1 , stim2 , ... , stim100 ) with different color-word pairs and subsequent ISI routines (e.g., isi1 , isi2 , ..., isi100 ), but that would not be very efficient, right? You probably see where I'm going: we can use a loop for this! In this loop, we can reuse the general structure of the trial (a stim routine + a isi routine) and only vary the elements that differ across trials (i.e., the words and text colors). These varying elements can be any property of any component within the loop! The way to specify the varying elements in a loop is through a conditions file (an Excel or CSV file). In this file, the rows represent the different trials and the columns represent the different elements that vary across trials. For our Stroop experiment, we could create a file, conditions.xlsx (or conditions.csv ) with two columns \u2014 stim_word and stim_color \u2014 and twenty rows: 5 rows for each color-word combination (5 for red-red, 5 for red-green, 5 for green-green, and 5 for green-red), assuming we want a 50/50 split between the congruent/incongruent conditions. The values for the stim_word and stim_color columns can then be used to modify, per iteration of the loop, the Text and Color attributes of our text component, respectively. ToDo Create an Excel (or CSV) file with two columns named stim_word and stim_color and 20 rows outlining the words and colors (which should be either red or green ). Note that your final file should have 21 rows (the first row being the column headers). Make sure to save this file in the same directory as your stroop.psyexp file. Now, to create the loop, you need to click Insert Loop in the flow pane. Then, when hovering your cursor above the actual flow diagram, a small circle should appear; click on the flow diagram where you'd like your loop to start and click a second time on the diagram where you'd like to your loop to end, after which a new Loop Properties window should pop up. In this window, you can specify the name of the loop, the type of the loop (i.e., how to loop across the different rows), and whether this is a loop across trials or blocks (i.e., the Is trials option, which you may ignore for now). The nReps property indicates how often you want to loop across your different trials and the Selected rows optionally allows you to specify a subset of rows to loop over. By setting the random seed (an integer), you can make sure that the loop shuffles the trials the same way every time you run the experiment. Finally, the Conditions property should point to the Excel or CSV file with the properties that change across the different trials. ToDo Create a loop across the stim and isi routines (i.e., the loop should encompass these two routines). Name this loop trial_loop and make sure it loops randomly across trials a total for 3 repetitions (generating 60 trials). No need to select a subset of rows or to set a random seed. Select your previously created conditions.xlsx (or conditions.csv ) for the Conditions property. Although we have created our loop, the data in the Conditions file has not been linked to our text component (in the stim routine), yet! To do so, we need to modify the Color and Text properties in our text component in two ways. First, we need to tell PsychoPy that the value of the property changes every iteration of the loop. To do so, we need to change the constant value to set every repeat in the dropdown menu next to the property. Second, we need to tell PsychoPy the column name (from our conditions file) that contains the values for the property we want to update every iteration. Importantly, this column name needs to be prefixed by a dollar sign ( $ ), i.e., $some_column_name . ToDo In the text component from your stim routine, change constant to set every repeat for both the Color and Text properties. Then, make sure the values for the Color and Text properties refer to the stim_color and stim_word columns from your conditions file, respectively. Click OK to update the text component. Run the experiment to see whether everything works as expected! If you made it to this point in the tutorial: good job! You created a complete Stroop experiment from scratch! In the following sections, we'll add some more (non-essential) elements to our experiment as an excuse to explain some more Builder components. Tip In the next section, we are going to add some routines after our trial loop. When we want to test this, it is quite annoying that we have to go through our entire trial loop before seeing the new routines. One way to \"skip\" the trial loop is to enable the Disable component property (in the Testing tab of the properties window) of each component in the stim and isi routines, which will skip said routines. Another thing you can do is to set the nReps property of the loop to 0!","title":"Loops and conditions files"},{"location":"psychopy_builder_part2/#mouse-interaction","text":"After the trials, we might want to get some feedback on the task from the participant. Let's ask our participant the question \"Did you like this task?\" to which the participant can answer \"yes\" or \"no\". This time, though, we'll make the participant answer using the mouse (instead of the keyboard) by clicking in either a green circle on the left (for \"yes\") or a red circle on the right (for \"no\"). Note that this is a completely useless addition the current experiment, but we included it nonetheless to demonstrate the Mouse component. ToDo Create a new routine, named feedback , which creates a display like the image below (doesn't have to exactly like it). Make sure each component has an infinite duration (by leaving the stop property empty). Hint: you can change the (RGB-specified) color of the Polygon components in the Advanced tab of the properties window. If you test your implementation, remember that you can use the escape key to abort the experiment. To enable interaction through the mouse we can, guess what, add a Mouse component! Like the keyboard component, this component can force the end of the routine with the End Routine on Press property. By default, this is set to any click , meaning that the routine will end at the first button press of the participant. However, we'd like to only end the routine when the participant made a \"valid\" click, i.e., clicked one of the circles. To do so, you can set the End Routine on Press to valid click and explicitly specify which components, when clicked, count as \"valid clicks\" at the Clickable stimuli property. ToDo Add a Mouse component, give it a sensible name, set the duration to infinite, and make sure it forces the end of the routine only when one of the circles have been clicked by filling in the component names of your circles in the Clickable stimuli field (separated by a comma). Run the experiment to see whether everything works as expected!","title":"Mouse interaction"},{"location":"psychopy_builder_part2/#image-components","text":"We are of course thankful for the participant's efforts, so let's thank them! We found a nice image to include in a final routine, thank_you.png (which is located in the tutorials/week_2 directory). To embed an image in your experiment, you can use the Image component. ToDo Add a new routine after the feedback routine, named goodbye , which contains a single Image component, which lasts 3 seconds. Make sure to set the Image property with the thank_you.png file. Run the experiment to see whether everything works as expected!","title":"Image components"},{"location":"psychopy_builder_part2/#code-components-optional","text":"Alright, for those that want to delve a little deeper into the more advanced Builder features, let's take a look at Code components (this is an optional section). With Code components, you can \"inject\" custom Python code into your Builder experiment. To showcase Code components, let's use one to implement random ISIs (instead of the fixed 0.5 seconds we use now). Using variable instead of fixed ISIs is a trick to prevent participants to anticipate the upcoming stimulus/trial. As we want to vary the ISI, we need to change the fixation dot in the isi routine. To do so, we'll create a new Python variable that represents a random ISI in a Code compoment, which we subsequently need to link to the Polygon component (i.e., the fixation target). To generate a random ISI (e.g., uniformly distributed between 0 and 1), we can use the [uniform] function from the built-in Python module random : import random t_isi = random . uniform ( 0 , 1 ) Here, t_isi is a float between 0 and 1. When creating a new Code component, the properties window actually allows you to specify different code types: Python ( py ), Javascript ( JS ), or a combination of both ( both ). Then, you can specify your code to run at different times during the experiment ( Before Experiment , Begin Experiment , End Experiment ) and routine ( Begin Routine , End Routine ). ToDo Create a new Code component, give it a sensible name, and make sure the code snippet above runs at the start of the isi routine. The only thing we still need to do is to make sure the Polygon component uses the randomly generated ISI (i.e., t_isi ) for its duration. In general, you can write Python code and access Python variables \"under the hood\" by prefixing the value by a dollar sign ( $ ), like we did when accessing the columns from the conditions file earlier. So, to access the Python variable t_isi from our Code component for the Polygon end property, you can use $t_isi . ToDo Make sure the end property of the fixation dot Polygon component uses the t_isi variable from our Code component. Then, run the experiment to verify that the ISIs are now different from trial to trial. Alright, if you are up for a challenge, try one or both of the next ToDos. ToDo (optional; difficult!) In some experiments, you may want to give your participant feedback after each trial. Add a routine after the stim routine within the trial loop that shows, for 0.5 seconds, the text \"correct!\" when the participant gave the right response, \"incorrect!\" when the participant gave the wrong response, and \"too late!\" when the participant didn't respond within 5 seconds. You need to include a Code component in this new routine that determines this feedback. Hint: in your Code component, the color of the current stimulus is stored in the Python variable stim_color and the response from the participant (i.e., either 'left' or 'right') is stored in the Python variable {name_kb_comp}.keys (replace {name_kb_comp} with the actual name of your keyboard componet in the stim routine). ToDo (optional; difficult!) In the current experiment, we indicated that participants should respond 'left' to green-colored words and 'right' to red-colored words. However, ideally, you'd want to counterbalance this color-response contingency across participants, i.e., (approximately) half of the participants should respond red-left/green-right and the other half should respond red-right/green-left. This between-subject condition should affect the text Component of the instruction routine. Arguably the easiest way to implement this is by creating another conditions file (e.g., participants.{xlsx,csv} ) that outlines the color-response condition, which modifies the instruction routine. Bonus: try to implement this ToDo and the previous optional ToDo in the same experiment! Finally, we're at the end of the Builder tutorial! By now, you know most of the essential features of PsychoPy's Builder interface. Of course, PsychoPy offers many more (advanced) functionality and funky components, but we'll leave that up to you to explore yourself! For now, let's continue with the first Coder tutorial !","title":"Code components (optional)"},{"location":"psychopy_coder_part1/","text":"The PsychoPy Coder (part 1) At last, we'll discuss the PsychoPy Coder! In this tutorial, we explain the basics of the Coder interface. In the next (and final) tutorial, we'll discuss the Coder interface in more detail. Like in the previous Builder tutorial, we will explain the concepts by walking you through the process of programming a real experiment. This time, we will create a variant of the classical color-word Stroop task, the emotion-word Stroop task, in which participants are presented with images of emotional facial expressions in combination with words describing emotions that are congruent with the images (e.g., a sad expression with the word \"sad\") or incongruent with the images (e.g., a happy exression with the word \"anger\"). The psychopy package When using the Builder interace, you've seen that, \"under the hood\", PsychoPy converts your Builder experiment to a Python script, which is then executed to run your experiment. If you look at this generated Python script closely, you'll see that most of the code is based on functions and classes from the psychopy Python package. Whereas the Builder interface generates such code from your graphical experiment, in the Coder interface you'll write your experiment using functionality from the psychopy package directly! Tip If you plan on programming your PsychoPy experiment (so not use the Builder interface), you technically do not need the entire \"standalone\" PsychoPy package; installing the psychopy Python package would suffice and you could just write your experiments in your favorite editor (like Visual Studio Code ). However, as mentioned on the Getting started page, getting the psychopy package to work is not easy, which is why we recommend the \"batteries included\" standalone version of PsychoPy. The psychopy package contains different modules for different features. For example, the visual module contains a class to specify and create a window and a large set of visual components (like text, image, and movie components) and the event module contains code to work with \"events\" such as mouse clicks/movement and keyboard presses. Check out PsychoPy's reference manual for a complete overview of the package's modules. As you will see, most of PsychoPy's functionality (like the different components ) is implemented in custom classes, so your experience with object-oriented programming as discussed in week 1 will be very useful! Info In this tutorial, you'll notice that many of the properties of Builder elements (e.g., the Experiment settings and Builder components like text and image components) have the same name and can take the same values as the attributes of the corresponding classes in the Coder interface! The Coder interface Now, let's get started by opening the Coder interface. ToDo Open the Coder interface ( View \u2192 Open Coder view ). You may close the Builder interface for now. Like the Builder interface, the Coder interface has several subwindows (panes). The panel on the left represents the Source assistant , which lists all files in the current working directory (in the File Browser tab) and information about the Python modules in the current working directory specifically (in the Structure tab). ToDo By default, PsychoPy's current directory is its installation path. Although this is not strictly necessary for this tutorial, change it to the tutorials/week_2 directory by clicking on the right arrow ( Jump to another folder ). At the bottom of the Coder interface in the Shelf pane, you'll find a so-called \"Python shell\". You can think of it as a type of command line (like we discussed in the first Jupyter notebook of week 1), but specifically for Python code. You can only run a single line at once, but it'll show the result immediately. ToDo Try writing some valid Python code in the Python shell (and pressing enter to run it), e.g., 1 + 1 . Note that the Python shell will remember variables if you define them, just like Jupyter notebooks, so you can also run multiple commands like this: >>> a = 5 >>> b = a ** 2 >>> b - a This Python shell is very useful to debug or try out short code snippets. For example, if you forgot what the function len returns, you can for example run the command len ([ 1 , 2 ]) in the Python shell to find out (spoiler: an integer). Finally, the last pane in the middle is PsychoPy's code editor. Here, you can open any plain-text file (not just Python files!) which you can modify and save. In practice, of course, you'll probably mostly work with Python files in this editor. Like most code editors, the Psychopy code editor also does some code formatting and syntax highlighting. One thing you'll notice is that it by default uses two spaces (in contrast to the more conventional four spaces) for indentation. Right now, there are probably no active files in your Psychopy code editor, so let's create one for our emotion-word Stroop task! ToDo Create a new Python file ( File \u2192 New ) and save it as emo_stroop.py in the tutorials/week_2 directory. Although you learned in week 1 that Python files should be run in a terminal on the command line (e.g., python emo_stroop.py ), Python files within the PsychoPy coder are actually run the same way as Builder experiments: by clicking on the big green play (\u25ba) button! ToDo Add some code to your exp_stroop.py file, e.g., print ( \"PsychoPy 4evah\" ) , and run the file. After clicking the Run experiment button, the Experiment runner window should pop up, displaying something like the following: #### Running:/Path/to/your/file/emo_stroop.py #### PsychoPy 4evah ##### Experiment ended. ##### As you can see, the Experiment runner shows your print statement; remember this, as it is a nice way to debug your experiments! Now, so far we haven't really discussed how to actually create experiments using the psychopy package, so let's start with arguably the most important element of Coder exeriments: the Window . The Window One of the most important classes from the psychopy package is the Window class, which defines the window in which you are going to run your experiment. It is quite a complex class, with many different attributes and methods; we'll discuss the most important ones in this tutorial. You can import the Window class from the visual module of the psychopy package (i.e., from psychopy.visual import Window ). This, by itself, does nothing; for the experiment window to appear, we need to intialize an object with the Window class. There are a lot of arguments that can be used upon initialization (for an overview, see the docs ), but all arguments have sensible defaults, so you can initialize a Window object as follows: win = Window () Note that you may use any variable name for your Window object, but we recommend naming it win like in the code snippet above, as it's short but descriptive. ToDo Initialize a Window object as shown in the above code snippet and run your experiment! Don't forget to also import the Window class! When running the current experiment, you should briefly see a gray window pop up. This is the \"default\" experiment window. We can, of course, change the way it looks by passing it arguments upon initialization! We can, for example, change the size by passing a tuple with the width and height in pixels to the argument size . For example, if you'd want a window of (for some reason) 400 (width) by 800 (height) pixels, you'd initialize your Window as follows: win = Window ( size = ( 400 , 800 )) Most of the times, though, you'd probably want to run your experiment in \"full-screen\" mode. To do so, pass True to the argument fullscr (i.e., win = Window ( fullscr = True ) ). You can also change the window's background color by passing a list or tuple with three numbers, corresponding to the desired RGB values, to the color argument. ToDo Although we recommend doing so in a real experiment, try making the window's background color bright blue. Want a more challenging exercise? Try to set the background to bright orange. Hint: note that PsychoPy assumes that RGB values range from -1 (minimum) to 1 (maximum), not from 0 to 255! Another important argument of the Window class is the monitor , to which you can pass the name of the monitor, as defined in the monitor center, you want to use for this experiment. For example, if you defined a monitor in the monitor center with the name \"laptop\", you can pass this configuration to the Window class as follows: win = Window ( monitor = 'laptop' ) ToDo (optional; advanced) If you don't want to use the monitor center at all (e.g., when you're programming your experiments in an external code editor), you can also programmatically using the Monitor class from the psychopy.monitor module. Try creating a monitor configuration for your own laptop/desktop monitor. Make sure you set the monitor's size (in pixels), width (in cm), and distance between you to the monitor (in cm). The documentation of the monitor module contains all info you need to do this! Finally, the last important argument of the Window class is the type of units that should be used by default for your components (which we'll discuss later), such as \"norm\" (for normalized units), \"deg\" (for visual degree angle), and \"pix\" (for pixels). As said before, there are in fact many more arguments to pass to the Window class (see the documentation for an overview), but we believe that the ones we discussed here are most important to know and that the other arguments all have sensible defaults. ToDo Let's create a Window object that we'll use for the rest of our emotion-word Stroop experiment! Make sure it is shown in full-screen mode, uses normalized units, uses the monitor specification of your own laptop/desktop monitor, and has a black background. Run your experiment to see whether it looks like expected! Note that you can also change Window attributes after creating the object by directly editing the attributes. For example, if you'd want to change the units after initialization to pixels, you can do the following: win . units = 'pix' Timing & clocks When you run the current experiment, you'll only see a black screen for like a second or so before it disappears again. The reason why the window doesn't stay open is because we don't tell it to! It is important to realize that PsychoPy will run the experiment script from top to bottom (like any Python file is run, actually) and will close the window once the script ends. Put differently, you can interpret the script as a chronological chain of events from the top of the script (beginning) to the bottom of the script (end). So, if you want to keep the window open for a little longer, we can simply tell PsychoPy so! There are, in fact, different ways to do this, but arguably the easiest way is using the wait function from the psychopy.core module. We can pass this function a number corresponding to the amount of time PsychoPy should wait before continuing with the rest of the script. ToDo Something with before printing the current time with the clock before and after a call to wait.","title":"The PsychoPy Coder (part 1)"},{"location":"psychopy_coder_part1/#the-psychopy-coder-part-1","text":"At last, we'll discuss the PsychoPy Coder! In this tutorial, we explain the basics of the Coder interface. In the next (and final) tutorial, we'll discuss the Coder interface in more detail. Like in the previous Builder tutorial, we will explain the concepts by walking you through the process of programming a real experiment. This time, we will create a variant of the classical color-word Stroop task, the emotion-word Stroop task, in which participants are presented with images of emotional facial expressions in combination with words describing emotions that are congruent with the images (e.g., a sad expression with the word \"sad\") or incongruent with the images (e.g., a happy exression with the word \"anger\").","title":"The PsychoPy Coder (part 1)"},{"location":"psychopy_coder_part1/#the-psychopy-package","text":"When using the Builder interace, you've seen that, \"under the hood\", PsychoPy converts your Builder experiment to a Python script, which is then executed to run your experiment. If you look at this generated Python script closely, you'll see that most of the code is based on functions and classes from the psychopy Python package. Whereas the Builder interface generates such code from your graphical experiment, in the Coder interface you'll write your experiment using functionality from the psychopy package directly! Tip If you plan on programming your PsychoPy experiment (so not use the Builder interface), you technically do not need the entire \"standalone\" PsychoPy package; installing the psychopy Python package would suffice and you could just write your experiments in your favorite editor (like Visual Studio Code ). However, as mentioned on the Getting started page, getting the psychopy package to work is not easy, which is why we recommend the \"batteries included\" standalone version of PsychoPy. The psychopy package contains different modules for different features. For example, the visual module contains a class to specify and create a window and a large set of visual components (like text, image, and movie components) and the event module contains code to work with \"events\" such as mouse clicks/movement and keyboard presses. Check out PsychoPy's reference manual for a complete overview of the package's modules. As you will see, most of PsychoPy's functionality (like the different components ) is implemented in custom classes, so your experience with object-oriented programming as discussed in week 1 will be very useful! Info In this tutorial, you'll notice that many of the properties of Builder elements (e.g., the Experiment settings and Builder components like text and image components) have the same name and can take the same values as the attributes of the corresponding classes in the Coder interface!","title":"The psychopy package"},{"location":"psychopy_coder_part1/#the-coder-interface","text":"Now, let's get started by opening the Coder interface. ToDo Open the Coder interface ( View \u2192 Open Coder view ). You may close the Builder interface for now. Like the Builder interface, the Coder interface has several subwindows (panes). The panel on the left represents the Source assistant , which lists all files in the current working directory (in the File Browser tab) and information about the Python modules in the current working directory specifically (in the Structure tab). ToDo By default, PsychoPy's current directory is its installation path. Although this is not strictly necessary for this tutorial, change it to the tutorials/week_2 directory by clicking on the right arrow ( Jump to another folder ). At the bottom of the Coder interface in the Shelf pane, you'll find a so-called \"Python shell\". You can think of it as a type of command line (like we discussed in the first Jupyter notebook of week 1), but specifically for Python code. You can only run a single line at once, but it'll show the result immediately. ToDo Try writing some valid Python code in the Python shell (and pressing enter to run it), e.g., 1 + 1 . Note that the Python shell will remember variables if you define them, just like Jupyter notebooks, so you can also run multiple commands like this: >>> a = 5 >>> b = a ** 2 >>> b - a This Python shell is very useful to debug or try out short code snippets. For example, if you forgot what the function len returns, you can for example run the command len ([ 1 , 2 ]) in the Python shell to find out (spoiler: an integer). Finally, the last pane in the middle is PsychoPy's code editor. Here, you can open any plain-text file (not just Python files!) which you can modify and save. In practice, of course, you'll probably mostly work with Python files in this editor. Like most code editors, the Psychopy code editor also does some code formatting and syntax highlighting. One thing you'll notice is that it by default uses two spaces (in contrast to the more conventional four spaces) for indentation. Right now, there are probably no active files in your Psychopy code editor, so let's create one for our emotion-word Stroop task! ToDo Create a new Python file ( File \u2192 New ) and save it as emo_stroop.py in the tutorials/week_2 directory. Although you learned in week 1 that Python files should be run in a terminal on the command line (e.g., python emo_stroop.py ), Python files within the PsychoPy coder are actually run the same way as Builder experiments: by clicking on the big green play (\u25ba) button! ToDo Add some code to your exp_stroop.py file, e.g., print ( \"PsychoPy 4evah\" ) , and run the file. After clicking the Run experiment button, the Experiment runner window should pop up, displaying something like the following: #### Running:/Path/to/your/file/emo_stroop.py #### PsychoPy 4evah ##### Experiment ended. ##### As you can see, the Experiment runner shows your print statement; remember this, as it is a nice way to debug your experiments! Now, so far we haven't really discussed how to actually create experiments using the psychopy package, so let's start with arguably the most important element of Coder exeriments: the Window .","title":"The Coder interface"},{"location":"psychopy_coder_part1/#the-window","text":"One of the most important classes from the psychopy package is the Window class, which defines the window in which you are going to run your experiment. It is quite a complex class, with many different attributes and methods; we'll discuss the most important ones in this tutorial. You can import the Window class from the visual module of the psychopy package (i.e., from psychopy.visual import Window ). This, by itself, does nothing; for the experiment window to appear, we need to intialize an object with the Window class. There are a lot of arguments that can be used upon initialization (for an overview, see the docs ), but all arguments have sensible defaults, so you can initialize a Window object as follows: win = Window () Note that you may use any variable name for your Window object, but we recommend naming it win like in the code snippet above, as it's short but descriptive. ToDo Initialize a Window object as shown in the above code snippet and run your experiment! Don't forget to also import the Window class! When running the current experiment, you should briefly see a gray window pop up. This is the \"default\" experiment window. We can, of course, change the way it looks by passing it arguments upon initialization! We can, for example, change the size by passing a tuple with the width and height in pixels to the argument size . For example, if you'd want a window of (for some reason) 400 (width) by 800 (height) pixels, you'd initialize your Window as follows: win = Window ( size = ( 400 , 800 )) Most of the times, though, you'd probably want to run your experiment in \"full-screen\" mode. To do so, pass True to the argument fullscr (i.e., win = Window ( fullscr = True ) ). You can also change the window's background color by passing a list or tuple with three numbers, corresponding to the desired RGB values, to the color argument. ToDo Although we recommend doing so in a real experiment, try making the window's background color bright blue. Want a more challenging exercise? Try to set the background to bright orange. Hint: note that PsychoPy assumes that RGB values range from -1 (minimum) to 1 (maximum), not from 0 to 255! Another important argument of the Window class is the monitor , to which you can pass the name of the monitor, as defined in the monitor center, you want to use for this experiment. For example, if you defined a monitor in the monitor center with the name \"laptop\", you can pass this configuration to the Window class as follows: win = Window ( monitor = 'laptop' ) ToDo (optional; advanced) If you don't want to use the monitor center at all (e.g., when you're programming your experiments in an external code editor), you can also programmatically using the Monitor class from the psychopy.monitor module. Try creating a monitor configuration for your own laptop/desktop monitor. Make sure you set the monitor's size (in pixels), width (in cm), and distance between you to the monitor (in cm). The documentation of the monitor module contains all info you need to do this! Finally, the last important argument of the Window class is the type of units that should be used by default for your components (which we'll discuss later), such as \"norm\" (for normalized units), \"deg\" (for visual degree angle), and \"pix\" (for pixels). As said before, there are in fact many more arguments to pass to the Window class (see the documentation for an overview), but we believe that the ones we discussed here are most important to know and that the other arguments all have sensible defaults. ToDo Let's create a Window object that we'll use for the rest of our emotion-word Stroop experiment! Make sure it is shown in full-screen mode, uses normalized units, uses the monitor specification of your own laptop/desktop monitor, and has a black background. Run your experiment to see whether it looks like expected! Note that you can also change Window attributes after creating the object by directly editing the attributes. For example, if you'd want to change the units after initialization to pixels, you can do the following: win . units = 'pix'","title":"The Window"},{"location":"psychopy_coder_part1/#timing-clocks","text":"When you run the current experiment, you'll only see a black screen for like a second or so before it disappears again. The reason why the window doesn't stay open is because we don't tell it to! It is important to realize that PsychoPy will run the experiment script from top to bottom (like any Python file is run, actually) and will close the window once the script ends. Put differently, you can interpret the script as a chronological chain of events from the top of the script (beginning) to the bottom of the script (end). So, if you want to keep the window open for a little longer, we can simply tell PsychoPy so! There are, in fact, different ways to do this, but arguably the easiest way is using the wait function from the psychopy.core module. We can pass this function a number corresponding to the amount of time PsychoPy should wait before continuing with the rest of the script. ToDo Something with before printing the current time with the clock before and after a call to wait.","title":"Timing &amp; clocks"},{"location":"psychopy_coder_part2/","text":"The PsychoPy Coder (part 2) Components Timing & clocks (part 2) Topics to discuss: Stimuli Timing Responses Keeping track of data / responses + saving","title":"The PsychoPy Coder (part 2)"},{"location":"psychopy_coder_part2/#the-psychopy-coder-part-2","text":"","title":"The PsychoPy Coder (part 2)"},{"location":"psychopy_coder_part2/#components","text":"","title":"Components"},{"location":"psychopy_coder_part2/#timing-clocks-part-2","text":"Topics to discuss: Stimuli Timing Responses Keeping track of data / responses + saving","title":"Timing &amp; clocks (part 2)"},{"location":"psychopy_how_to_continue/","text":"How to continue with PsychoPy? In this course, you learned the basics of stimulus presentation using PsychoPy, but PsychoPy has many more awesome features than we had time to discuss (including creating online experiments). Their resources page features an extensive collection of materials that you may use to extend your PsychoPy skills! One resource we particularly like is the book written by Jonathan Peirce (PsychoPy's creator) and Michael MacAskill: Building Experiments in PsychoPy . Apart from practical information about the PsychoPy software, it also contains several informative chapters about stimulus presentation in general. Also, for some shameless self-promotion, if you're comfortable with object-oriented programming in Python, you may want to check out the exptools2 Python package. This package is built on top of the PsychoPy package to facilitate accurate psychophysics experiments.","title":"How to continue with PsychoPy?"},{"location":"psychopy_how_to_continue/#how-to-continue-with-psychopy","text":"In this course, you learned the basics of stimulus presentation using PsychoPy, but PsychoPy has many more awesome features than we had time to discuss (including creating online experiments). Their resources page features an extensive collection of materials that you may use to extend your PsychoPy skills! One resource we particularly like is the book written by Jonathan Peirce (PsychoPy's creator) and Michael MacAskill: Building Experiments in PsychoPy . Apart from practical information about the PsychoPy software, it also contains several informative chapters about stimulus presentation in general. Also, for some shameless self-promotion, if you're comfortable with object-oriented programming in Python, you may want to check out the exptools2 Python package. This package is built on top of the PsychoPy package to facilitate accurate psychophysics experiments.","title":"How to continue with PsychoPy?"},{"location":"week_1/","text":"Python essentials In this week, we will cover the essentials of Python. On Monday, the lecture will discuss the differences between Python and R and their relative (dis)advantages. The following tutorial will introduce you to the basics of Python, the concept of object-oriented programming, and plotting using the package matplotlib . On Wednesday, the lecture will discuss the Python in the context of data analysis. In the following tutorial, you will work with the data analysis packages pandas and numpy . Lectures < EMBED LECTURE SLIDES HERE > Tutorials This week, there are six tutorials. Start Jupyterhub using one of the buttons below (the UvA one only works for UvA students enrolled in the course): Monday tutorials On Monday, there are three relatively short tutorials. You probably will not finish them all today; just make sure you finished all of them before Wednesday. The tutorials for today are written in Jupyter notebooks. Please do them in order (start with 0_introduction.ipynb , then do 1_python_basics.ipynb ). Wednesday tutorials On Wednesday, there are three tutorials on the data visualization package matplotlib ( 2_matplotlib.ipynb ) and the data processing/analysis packages pandas ( 3_pandas.ipynb ) and numpy ( 4_numpy.ipynb ). The numpy tutorial is optional (i.e., its contents won't be featured on the exam/assignments), but highly recommended for those wanting to develop more advanced data analysis skills (which are useful for, e.g., machine learning and neuroimaging research).","title":"Python essentials"},{"location":"week_1/#python-essentials","text":"In this week, we will cover the essentials of Python. On Monday, the lecture will discuss the differences between Python and R and their relative (dis)advantages. The following tutorial will introduce you to the basics of Python, the concept of object-oriented programming, and plotting using the package matplotlib . On Wednesday, the lecture will discuss the Python in the context of data analysis. In the following tutorial, you will work with the data analysis packages pandas and numpy .","title":"Python essentials"},{"location":"week_1/#lectures","text":"< EMBED LECTURE SLIDES HERE >","title":"Lectures"},{"location":"week_1/#tutorials","text":"This week, there are six tutorials. Start Jupyterhub using one of the buttons below (the UvA one only works for UvA students enrolled in the course):","title":"Tutorials"},{"location":"week_1/#monday-tutorials","text":"On Monday, there are three relatively short tutorials. You probably will not finish them all today; just make sure you finished all of them before Wednesday. The tutorials for today are written in Jupyter notebooks. Please do them in order (start with 0_introduction.ipynb , then do 1_python_basics.ipynb ).","title":"Monday tutorials"},{"location":"week_1/#wednesday-tutorials","text":"On Wednesday, there are three tutorials on the data visualization package matplotlib ( 2_matplotlib.ipynb ) and the data processing/analysis packages pandas ( 3_pandas.ipynb ) and numpy ( 4_numpy.ipynb ). The numpy tutorial is optional (i.e., its contents won't be featured on the exam/assignments), but highly recommended for those wanting to develop more advanced data analysis skills (which are useful for, e.g., machine learning and neuroimaging research).","title":"Wednesday tutorials"},{"location":"week_2/","text":"PsychoPy In this week, we will cover the essentials of PsychoPy . On Monday, the lecture will given an introduction to stimulus presentation. The following tutorial will introduce you to the PsychoPy Builder interface and the basics of the Coder interface. On Wednesday, the lecture will discuss the PsychoPy Coder interface specifically and in the subsequent tutorial you will delve deeper into programming experiments with PsychoPy. Lectures < EMBED LECTURE SLIDES HERE > Tutorials This week, there are four tutorials about PsychoPy: one on the basics of PsychoPy, two on the Builder interface, and two on the Coder interface. Unlike the tutorials in week 1, this week's tutorials are not written in Jupyter Notebooks, but are just embedded as pages with instructions on this website. Please go through them in order (see the table of contents on the left side of this page). Acknowledgements The material of this week is based on the PsychoPy workshop from the GestaltReVision group at KU Leuven and the materials from PsychoPy's own 3-day workshop . Cite If you ever use PsychoPy in your experiments, please give the PsychoPy developers credit by citing the following article: Peirce, J., Gray, J. R., Simpson, S., MacAskill, M., H\u00f6chenberger, R., Sogo, H., ... & Lindel\u00f8v, J. K. (2019). PsychoPy2: Experiments in behavior made easy. Behavior research methods, 51 (1), 195-203. Let's start with the first PsychoPy tutorial !","title":"PsychoPy"},{"location":"week_2/#psychopy","text":"In this week, we will cover the essentials of PsychoPy . On Monday, the lecture will given an introduction to stimulus presentation. The following tutorial will introduce you to the PsychoPy Builder interface and the basics of the Coder interface. On Wednesday, the lecture will discuss the PsychoPy Coder interface specifically and in the subsequent tutorial you will delve deeper into programming experiments with PsychoPy.","title":"PsychoPy"},{"location":"week_2/#lectures","text":"< EMBED LECTURE SLIDES HERE >","title":"Lectures"},{"location":"week_2/#tutorials","text":"This week, there are four tutorials about PsychoPy: one on the basics of PsychoPy, two on the Builder interface, and two on the Coder interface. Unlike the tutorials in week 1, this week's tutorials are not written in Jupyter Notebooks, but are just embedded as pages with instructions on this website. Please go through them in order (see the table of contents on the left side of this page).","title":"Tutorials"},{"location":"week_2/#acknowledgements","text":"The material of this week is based on the PsychoPy workshop from the GestaltReVision group at KU Leuven and the materials from PsychoPy's own 3-day workshop . Cite If you ever use PsychoPy in your experiments, please give the PsychoPy developers credit by citing the following article: Peirce, J., Gray, J. R., Simpson, S., MacAskill, M., H\u00f6chenberger, R., Sogo, H., ... & Lindel\u00f8v, J. K. (2019). PsychoPy2: Experiments in behavior made easy. Behavior research methods, 51 (1), 195-203. Let's start with the first PsychoPy tutorial !","title":"Acknowledgements"}]}